From f957f6fe5a6ad59c49e17277ee1a81a788132a2f Mon Sep 17 00:00:00 2001
Date: Thu, 24 Sep 2015 09:22:33 +0300
Subject: [PATCH] Added MOE support to LibGDX

---
 backends/gdx-backend-moe/.classpath                |   7 +
 backends/gdx-backend-moe/.project                  |  17 +
 .../.settings/org.eclipse.jdt.core.prefs           |  11 +
 backends/gdx-backend-moe/objectal/README           |  11 +
 backends/gdx-backend-moe/objectal/objectal.natjgen |  42 ++
 backends/gdx-backend-moe/pom.xml                   |  49 ++
 .../gdx/backends/intel/moe/IOSApplication.java     | 393 +++++++++++++++
 .../intel/moe/IOSApplicationConfiguration.java     | 101 ++++
 .../backends/intel/moe/IOSApplicationDelegate.java | 266 ++++++++++
 .../badlogic/gdx/backends/intel/moe/IOSAudio.java  |  68 +++
 .../gdx/backends/intel/moe/IOSClipboard.java       |  35 ++
 .../gdx/backends/intel/moe/IOSFileHandle.java      |  81 ++++
 .../badlogic/gdx/backends/intel/moe/IOSFiles.java  |  85 ++++
 .../gdx/backends/intel/moe/IOSGLKView.java         |  98 ++++
 .../gdx/backends/intel/moe/IOSGraphics.java        | 434 +++++++++++++++++
 .../badlogic/gdx/backends/intel/moe/IOSInput.java  | 537 +++++++++++++++++++++
 .../badlogic/gdx/backends/intel/moe/IOSMusic.java  | 184 +++++++
 .../badlogic/gdx/backends/intel/moe/IOSNet.java    |  69 +++
 .../gdx/backends/intel/moe/IOSPreferences.java     | 191 ++++++++
 .../gdx/backends/intel/moe/IOSServerSocket.java    |  91 ++++
 .../badlogic/gdx/backends/intel/moe/IOSSocket.java | 124 +++++
 .../badlogic/gdx/backends/intel/moe/IOSSound.java  | 138 ++++++
 .../backends/intel/moe/IOSUIViewController.java    |  77 +++
 .../badlogic/gdx/backends/iosrobovm/IOSGLES20.java | 369 ++++++++++++++
 .../gdx/graphics/g3d/shaders/default.fragment.glsl | 181 +++++++
 .../gdx/graphics/g3d/shaders/default.vertex.glsl   | 323 +++++++++++++
 .../gdx/graphics/g3d/shaders/depth.fragment.glsl   |  23 +
 .../gdx/graphics/g3d/shaders/depth.vertex.glsl     | 114 +++++
 .../src/com/badlogic/gdx/utils/JsonReader.rl       | 332 +++++++++++++
 .../src/com/badlogic/gdx/utils/XmlReader.rl        | 525 ++++++++++++++++++++
 .../src/com/badlogic/gdx/utils/arial-15.fnt        | 229 +++++++++
 .../src/com/badlogic/gdx/utils/arial-15.png        | Bin 0 -> 21814 bytes
 .../gdx-backend-moe/src/ios/objectal/ALBuffer.java | 104 ++++
 .../gdx-backend-moe/src/ios/objectal/ALSource.java | 409 ++++++++++++++++
 .../src/ios/objectal/OALAudioTrack.java            | 342 +++++++++++++
 .../src/ios/objectal/OALSimpleAudio.java           | 316 ++++++++++++
 .../src/ios/objectal/c/Globals.java                |  85 ++++
 .../src/ios/objectal/protocol/ALSoundSource.java   | 275 +++++++++++
 .../src/ios/objectal/struct/ALOrientation.java     |  54 +++
 .../src/ios/objectal/struct/ALPoint.java           |  60 +++
 .../src/ios/objectal/struct/ALVector.java          |  60 +++
 .../gdx-backend-moe/src/ios/openal/c/OpenAL.java   | 346 +++++++++++++
 .../gdx-backend-moe/src/native/inline/Globals.m    |  26 +
 pom.xml                                            |   1 +
 44 files changed, 7283 insertions(+)
 create mode 100644 backends/gdx-backend-moe/.classpath
 create mode 100644 backends/gdx-backend-moe/.project
 create mode 100644 backends/gdx-backend-moe/.settings/org.eclipse.jdt.core.prefs
 create mode 100644 backends/gdx-backend-moe/objectal/README
 create mode 100644 backends/gdx-backend-moe/objectal/objectal.natjgen
 create mode 100644 backends/gdx-backend-moe/pom.xml
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplication.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationConfiguration.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationDelegate.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSAudio.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSClipboard.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFileHandle.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFiles.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGLKView.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGraphics.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSInput.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSMusic.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSNet.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSPreferences.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSServerSocket.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSocket.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSound.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSUIViewController.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.fragment.glsl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.vertex.glsl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/utils/JsonReader.rl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/utils/XmlReader.rl
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.fnt
 create mode 100644 backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.png
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/ALBuffer.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/ALSource.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/OALAudioTrack.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/OALSimpleAudio.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/c/Globals.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/protocol/ALSoundSource.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/struct/ALOrientation.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/struct/ALPoint.java
 create mode 100644 backends/gdx-backend-moe/src/ios/objectal/struct/ALVector.java
 create mode 100644 backends/gdx-backend-moe/src/ios/openal/c/OpenAL.java
 create mode 100644 backends/gdx-backend-moe/src/native/inline/Globals.m

diff --git a/backends/gdx-backend-moe/.classpath b/backends/gdx-backend-moe/.classpath
new file mode 100644
index 0000000..630cc40
--- /dev/null
+++ b/backends/gdx-backend-moe/.classpath
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/gdx"/>
+	<classpathentry kind="var" path="INTEL_MULTI_OS_ENGINE_HOME/sdk/intel-moe-ios.jar" sourcepath="/INTEL_MULTI_OS_ENGINE_HOME/sdk/intel-moe-ios.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/backends/gdx-backend-moe/.project b/backends/gdx-backend-moe/.project
new file mode 100644
index 0000000..0d3ae76
--- /dev/null
+++ b/backends/gdx-backend-moe/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>gdx-backend-moe</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/backends/gdx-backend-moe/.settings/org.eclipse.jdt.core.prefs b/backends/gdx-backend-moe/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..7341ab1
--- /dev/null
+++ b/backends/gdx-backend-moe/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.7
diff --git a/backends/gdx-backend-moe/objectal/README b/backends/gdx-backend-moe/objectal/README
new file mode 100644
index 0000000..ff0b8f8
--- /dev/null
+++ b/backends/gdx-backend-moe/objectal/README
@@ -0,0 +1,11 @@
+ObjectAL binding for Intel Multi-OS Engine
+------------------------------------------
+
+Unpack the ObjectAL sources to this directory 
+(the result should be a directory named ObjectAL).
+
+TODO: The generated inline method stubs are not compiled 
+as part of the libgdx build process, and not distributed
+with the libgdx native libraries. This is not causing a problem
+because these methods are not used by the backend, but it should be 
+fixed anyways.
diff --git a/backends/gdx-backend-moe/objectal/objectal.natjgen b/backends/gdx-backend-moe/objectal/objectal.natjgen
new file mode 100644
index 0000000..b7d989b
--- /dev/null
+++ b/backends/gdx-backend-moe/objectal/objectal.natjgen
@@ -0,0 +1,42 @@
+{
+  "platform": "iOS",
+  "architecture": "armv7",
+  "package-base": "ios.objectal",
+  "base-sdk": "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk",
+  "header-search-paths": [],
+  "user-header-search-paths": [
+    "${PROJECT}/objectal/ObjectAL/ObjectAL"
+  ],
+  "framework-search-paths": [],
+  "source": "#import \u003cOALSimpleAudio.h\u003e\n#import \u003cOpenAL/ALBuffer.h\u003e\n#import \u003cOpenAL/ALSource.h\u003e\n#import \u003cAudioTrack/OALAudioTrack.h\u003e\n",
+  "output": "src",
+  "docsets": [
+    "com.apple.adc.documentation.AppleiOS8.1.iOSLibrary.docset"
+  ],
+  "unit-rules": [
+    {
+      "final": false,
+      "conditions": [
+        {
+          "condition": "path-prefix",
+          "value": "${SDK}"
+        }
+      ],
+      "actions": [
+        {
+          "action": "skip-generation"
+        },
+        {
+          "action": "replace-package-base",
+          "value": "ios"
+        }
+      ]
+    }
+  ],
+  "logs-path": "${PROJECT}/logs/natjgen.log",
+  "type-config-clean-output": false,
+  "header-file-resolving-paths": [
+    "${SDK}/usr/include",
+    "${SDK}/System/Library/Frameworks"
+  ]
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/pom.xml b/backends/gdx-backend-moe/pom.xml
new file mode 100644
index 0000000..c3750ee
--- /dev/null
+++ b/backends/gdx-backend-moe/pom.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>com.badlogicgames.gdx</groupId>
+        <artifactId>gdx-parent</artifactId>
+        <version>1.7.1-SNAPSHOT</version>
+        <relativePath>../../pom.xml</relativePath>
+    </parent>
+
+    <artifactId>gdx-backend-moe</artifactId>
+    <packaging>jar</packaging>
+    <name>libGDX iOS Intel Multi-OS Engine Backend</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>gdx</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+
+        <dependency>
+              <groupId>com.intel</groupId>
+               <artifactId>intel-moe-ios</artifactId>
+               <version>1.0+</version>
+              <scope>system</scope>
+        <systemPath>${env.INTEL_MULTI_OS_ENGINE_HOME}/sdk/intel-moe-ios.jar</systemPath>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <sourceDirectory>src</sourceDirectory>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-source-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>attach-sources</id>
+                        <phase>generate-resources</phase>
+                        <goals>
+                            <goal>jar-no-fork</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+</project>
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplication.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplication.java
new file mode 100644
index 0000000..a2121b5
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplication.java
@@ -0,0 +1,393 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import java.io.File;
+
+import ios.coregraphics.struct.CGSize;
+import ios.foundation.NSDictionary;
+import ios.foundation.NSMutableDictionary;
+import ios.uikit.UIApplication;
+import ios.uikit.UIDevice;
+import ios.uikit.enums.UIInterfaceOrientation;
+import ios.uikit.UIScreen;
+import ios.uikit.enums.UIUserInterfaceIdiom;
+import ios.uikit.UIViewController;
+import ios.uikit.UIWindow;
+
+import com.badlogic.gdx.Application;
+import com.badlogic.gdx.ApplicationListener;
+import com.badlogic.gdx.Audio;
+import com.badlogic.gdx.Files;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics;
+import com.badlogic.gdx.Input;
+import com.badlogic.gdx.LifecycleListener;
+import com.badlogic.gdx.Net;
+import com.badlogic.gdx.Preferences;
+import com.badlogic.gdx.backends.iosrobovm.IOSGLES20;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.Clipboard;
+
+public class IOSApplication implements Application {
+
+	UIApplication uiApp;
+	UIWindow uiWindow;
+	ApplicationListener listener;
+	IOSApplicationConfiguration config;
+	IOSGraphics graphics;
+	IOSAudio audio;
+	IOSFiles files;
+	IOSInput input;
+	IOSNet net;
+	int logLevel = Application.LOG_DEBUG;
+
+	/** The display scale factor (1.0f for normal; 2.0f to use retina coordinates/dimensions). */
+	float displayScaleFactor;
+
+	Array<Runnable> runnables = new Array<Runnable>();
+	Array<Runnable> executedRunnables = new Array<Runnable>();
+	Array<LifecycleListener> lifecycleListeners = new Array<LifecycleListener>();
+
+	public IOSApplication (ApplicationListener listener, IOSApplicationConfiguration config) {
+		this.listener = listener;
+		this.config = config;
+	}
+	
+	public final boolean didFinishLaunching (UIApplication uiApp, NSDictionary options) {
+		Gdx.app = this;
+		this.uiApp = uiApp;
+
+		// enable or disable screen dimming
+		UIApplication.sharedApplication().setIdleTimerDisabled(config.preventScreenDimming);
+
+		Gdx.app.debug("IOSApplication", "iOS version: " + UIDevice.currentDevice().systemVersion());
+		// fix the scale factor if we have a retina device (NOTE: iOS screen sizes are in "points" not pixels by default!)
+
+		float scale = (float)(getVersion() >= 8 ? UIScreen.mainScreen().nativeScale() : UIScreen.mainScreen()
+			.scale());
+		if (scale >= 2.0f) {
+			Gdx.app.debug("IOSApplication", "scale: " + scale);
+			if (UIDevice.currentDevice().userInterfaceIdiom() == UIUserInterfaceIdiom.Pad) {
+				// it's an iPad!
+				displayScaleFactor = config.displayScaleLargeScreenIfRetina * scale;
+			} else {
+				// it's an iPod or iPhone
+				displayScaleFactor = config.displayScaleSmallScreenIfRetina * scale;
+			}
+		} else {
+			// no retina screen: no scaling!
+			if (UIDevice.currentDevice().userInterfaceIdiom() == UIUserInterfaceIdiom.Pad) {
+				// it's an iPad!
+				displayScaleFactor = config.displayScaleLargeScreenIfNonRetina;
+			} else {
+				// it's an iPod or iPhone
+				displayScaleFactor = config.displayScaleSmallScreenIfNonRetina;
+			}
+		}
+		GL20 gl20 = new IOSGLES20();
+		
+		Gdx.gl = gl20;
+		Gdx.gl20 = gl20;
+		
+		// setup libgdx
+		this.input = IOSInput.alloc().init();
+		this.input.iOSInput(this);
+		
+		this.graphics = IOSGraphics.alloc().init();
+		this.graphics.iOSGraphics(getBounds(null), scale, this, config, input, gl20);
+		
+		this.files = new IOSFiles();
+		this.audio = new IOSAudio(config);
+		this.net = new IOSNet(this);
+
+		Gdx.files = this.files;
+		Gdx.graphics = this.graphics;
+		Gdx.audio = this.audio;
+		Gdx.input = this.input;
+		Gdx.net = this.net;
+
+		this.input.setupPeripherals();
+
+		this.uiWindow = UIWindow.alloc().initWithFrame(
+				UIScreen.mainScreen().bounds());
+		this.uiWindow.setRootViewController(this.graphics.viewController);
+		this.uiWindow.makeKeyAndVisible();
+		Gdx.app.debug("IOSApplication", "created");
+		return true;
+	}
+	
+	/**
+	 * Return the UI view controller of IOSApplication
+	 * @return the view controller of IOSApplication
+	 */
+	public UIViewController getUIViewController(){
+		return graphics.viewController;
+	}
+
+	/** Returns our real display dimension based on screen orientation.
+	 * 
+	 * @param viewController The view controller.
+	 * @return Or real display dimension. */
+	CGSize getBounds (UIViewController viewController) {
+		// or screen size (always portrait)
+		CGSize bounds = UIScreen.mainScreen().bounds().size();
+
+		// determine orientation and resulting width + height
+		int orientation;
+		if (viewController != null) {
+			orientation = (int) viewController.interfaceOrientation();
+		} else if (config.orientationLandscape == config.orientationPortrait) {
+			/*
+			 * if the app has orientation in any side then we can only check status bar orientation
+			 */
+			orientation = (int) uiApp.statusBarOrientation();
+		} else if (config.orientationLandscape) {// is landscape true and portrait false
+			orientation = (int) UIInterfaceOrientation.LandscapeRight;
+		} else {// is portrait true and landscape false
+			orientation = (int) UIInterfaceOrientation.Portrait;
+		}
+		
+		int width;
+		int height;
+		switch (orientation) {
+		case (int) UIInterfaceOrientation.LandscapeLeft:
+		case (int) UIInterfaceOrientation.LandscapeRight:
+			height = (int)bounds.width();
+			width = (int)bounds.height();
+			if (width < height) {
+				width = (int)bounds.width();
+				height = (int)bounds.height();
+			}
+			break;
+		default:
+			// assume portrait
+			width = (int)bounds.width();
+			height = (int)bounds.height();
+		}
+
+		// update width/height depending on display scaling selected 
+		width *= displayScaleFactor;
+		height *= displayScaleFactor;
+
+		// log screen dimensions
+		Gdx.app.debug("IOSApplication", "View: " + orientation + " " + width + "x" + height);
+
+		// return resulting view size (based on orientation)
+		return new CGSize(width, height);
+	}
+
+	public final void didBecomeActive (UIApplication uiApp) {
+		Gdx.app.debug("IOSApplication", "resumed");
+		graphics.makeCurrent();
+		graphics.resume();
+	}
+
+	public final void willResignActive (UIApplication uiApp) {
+		Gdx.app.debug("IOSApplication", "paused");
+		graphics.makeCurrent();
+		graphics.pause();
+		Gdx.gl.glFlush();
+	}
+
+	public final void willTerminate (UIApplication uiApp) {
+		Gdx.app.debug("IOSApplication", "disposed");
+		graphics.makeCurrent();
+		Array<LifecycleListener> listeners = lifecycleListeners;
+		synchronized(listeners) {
+			for(LifecycleListener listener: listeners) {
+				listener.pause();
+			}
+		}
+		listener.dispose();
+		Gdx.gl.glFlush();
+	}
+
+	@Override
+	public ApplicationListener getApplicationListener () {
+		return listener;
+	}
+	
+	@Override
+	public Graphics getGraphics () {
+		return graphics;
+	}
+
+	@Override
+	public Audio getAudio () {
+		return audio;
+	}
+
+	@Override
+	public Input getInput () {
+		return input;
+	}
+
+	@Override
+	public Files getFiles () {
+		return files;
+	}
+
+	@Override
+	public Net getNet () {
+		return net;
+	}
+
+	@Override
+	public void log (String tag, String message) {
+		if (logLevel > LOG_NONE) {
+			System.out.println("[info] " + tag + ": " + message);
+		}
+	}
+
+	@Override
+	public void log (String tag, String message, Throwable exception) {
+		if (logLevel > LOG_NONE) {
+			System.out.println("[info] " + tag + ": " + message);
+			exception.printStackTrace();
+		}
+	}
+
+	@Override
+	public void error (String tag, String message) {
+		if (logLevel >= LOG_ERROR) {
+			System.out.println("[error] " + tag + ": " + message);
+		}
+	}
+
+	@Override
+	public void error (String tag, String message, Throwable exception) {
+		if (logLevel >= LOG_ERROR) {
+			System.out.println("[error] " + tag + ": " + message);
+			exception.printStackTrace();
+		}
+	}
+
+	@Override
+	public void debug (String tag, String message) {
+		if (logLevel >= LOG_DEBUG) {
+			System.out.println("[debug] " + tag + ": " + message);
+		}
+	}
+
+	@Override
+	public void debug (String tag, String message, Throwable exception) {
+		if (logLevel >= LOG_DEBUG) {
+			System.out.println("[error] " + tag + ": " + message);
+			exception.printStackTrace();
+		}
+	}
+
+	@Override
+	public void setLogLevel (int logLevel) {
+		this.logLevel = logLevel;
+	}
+
+	@Override
+	public int getLogLevel() {
+		return logLevel;
+	}
+
+	@Override
+	public ApplicationType getType () {
+		return ApplicationType.iOS;
+	}
+
+	@Override
+	public int getVersion () {
+		return Integer.parseInt(UIDevice.currentDevice().systemVersion().split("\\.")[0]);
+	}
+
+	@Override
+	public long getJavaHeap () {
+		return Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
+	}
+
+	@Override
+	public long getNativeHeap () {
+		return getJavaHeap();
+	}
+
+	@Override
+	public Preferences getPreferences (String name) {
+		File libraryPath = new File(System.getenv("HOME"), "Library");
+		String finalPath = new File(libraryPath, name + ".plist").getAbsolutePath();
+		
+		Gdx.app.debug("IOSApplication", "Loading NSDictionary from file " + finalPath);
+		NSMutableDictionary nsDictionary = NSMutableDictionary.alloc().initWithContentsOfFile(finalPath);
+
+		// if it fails to get an existing dictionary, create a new one.
+		if (nsDictionary == null) {
+			Gdx.app.debug("IOSApplication", "NSDictionary not found, creating a new one");
+			nsDictionary = NSMutableDictionary.alloc().init();
+			boolean fileWritten = nsDictionary.writeToFileAtomically(finalPath, false);
+			if (fileWritten)
+				Gdx.app.debug("IOSApplication", "NSDictionary file written");
+			else 
+				Gdx.app.debug("IOSApplication", "Failed to write NSDictionary to file " + finalPath);
+		}
+		return new IOSPreferences(nsDictionary, finalPath);
+	}
+
+	@Override
+	public void postRunnable (Runnable runnable) {
+		synchronized (runnables) {
+			runnables.add(runnable);
+		}
+	}
+
+	public void processRunnables () {
+		synchronized (runnables) {
+			executedRunnables.clear();
+			executedRunnables.addAll(runnables);
+			runnables.clear();
+		}
+		for (int i = 0; i < executedRunnables.size; i++) {
+			try {
+				executedRunnables.get(i).run();
+			} catch (Throwable t) {
+				t.printStackTrace();
+			}
+		}
+	}
+
+	@Override
+	public void exit () {
+
+	}
+	
+	@Override
+	public Clipboard getClipboard () {
+		return new IOSClipboard();
+	}
+	
+	@Override
+	public void addLifecycleListener (LifecycleListener listener) {
+		synchronized(lifecycleListeners) {
+			lifecycleListeners.add(listener);
+		}
+	}
+
+	@Override
+	public void removeLifecycleListener (LifecycleListener listener) {
+		synchronized(lifecycleListeners) {
+			lifecycleListeners.removeValue(listener, true);
+		}		
+	}
+	
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationConfiguration.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationConfiguration.java
new file mode 100644
index 0000000..a92dbad
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationConfiguration.java
@@ -0,0 +1,101 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.glkit.enums.GLKViewDrawableColorFormat;
+import ios.glkit.enums.GLKViewDrawableDepthFormat;
+import ios.glkit.enums.GLKViewDrawableMultisample;
+import ios.glkit.enums.GLKViewDrawableStencilFormat;
+
+public class IOSApplicationConfiguration {
+	
+	/** whether to enable screen dimming. */
+	public boolean preventScreenDimming = true;
+	/** whether or not portrait orientation is supported. */
+	public boolean orientationPortrait = true;
+	/** whether or not landscape orientation is supported. */
+	public boolean orientationLandscape = true;
+	
+	/** the color format, RGB565 is the default **/
+	public int colorFormat = GLKViewDrawableColorFormat.RGB565;
+	
+	/** the depth buffer format, Format16 is default **/
+	public int depthFormat = GLKViewDrawableDepthFormat.Format16;
+	
+	/** the stencil buffer format, None is default **/
+	public int stencilFormat = GLKViewDrawableStencilFormat.FormatNone;
+	
+	/** the multisample format, None is default **/
+	public int multisample = GLKViewDrawableMultisample.MultisampleNone;
+	
+	/** number of frames per second, 60 is default **/
+	public int preferredFramesPerSecond = 60;
+	
+	/**
+	 * Scale factor to use on large screens  with retina display, i.e. iPad 3+ (has no effect on non-retina screens).
+	 * <ul>
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 2048x1536 you 
+	 *       will work in 1024x768. This looks pixel perfect and will save you the trouble to create bigger
+	 *       graphics for the retina display. 
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       oof 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
+	public float displayScaleLargeScreenIfRetina = 1.0f;
+	/**
+	 * Scale factor to use on small screens with retina display, i.e. iPhone 4+, iPod 4+ (has no effect on non-retina screens).
+	 * <ul>
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>0.5 = LibGDX will behave as you would only have half the pixels. I.e. instead of 960x640 you 
+	 *       will work in 480x320. This looks pixel perfect and will save you the trouble to create bigger
+	 *       graphics for the retina display. 
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
+	public float displayScaleSmallScreenIfRetina = 1.0f;
+	/**
+	 * Scale factor to use on large screens  without retina display, i.e. iPad 1+2 (has no effect on retina screens).
+	 * <ul>
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
+	public float displayScaleLargeScreenIfNonRetina = 1.0f;
+	/**
+	 * Scale factor to use on small screens without retina display, i.e. iPhone 1-3, iPod 1-3 (has no effect on retina screens).
+	 * <ul>
+	 *   <li>1.0 = no scaling (everything is in pixels)
+	 *   <li>any other value: scales the screens according to your scale factor. A scale factor
+	 *       of 0.75, 0.8, 1.2, 1.5 etc. works very well without any artifacts! 
+	 * </ul>
+    */
+	public float displayScaleSmallScreenIfNonRetina = 1.0f;
+	
+	/** whether to use the accelerometer, default true **/
+	public boolean useAccelerometer = true;
+	/** the update interval to poll the accelerometer with, in seconds **/
+	public float accelerometerUpdate = 0.05f;
+	
+	/** whether to use the compass, default true **/
+	public boolean useCompass = true;
+	
+	/** whether or not to allow background music from iPod **/
+	public boolean allowIpod = false;
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationDelegate.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationDelegate.java
new file mode 100644
index 0000000..3126cf1
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSApplicationDelegate.java
@@ -0,0 +1,266 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.NSObject;
+import ios.uikit.protocol.UIApplicationDelegate;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.objc.ann.NotImplemented;
+import ios.uikit.UILocalNotification;
+import ios.foundation.NSArray;
+import ios.foundation.NSData;
+import com.intel.inde.moe.natj.objc.ann.IsOptional;
+import ios.uikit.UIApplication;
+import ios.coregraphics.struct.CGRect;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import ios.foundation.NSDictionary;
+import ios.uikit.UIWindow;
+import ios.foundation.NSError;
+import ios.uikit.UIViewController;
+import ios.foundation.NSCoder;
+import ios.foundation.NSURL;
+
+public abstract class IOSApplicationDelegate extends NSObject implements UIApplicationDelegate {
+
+	private IOSApplication app;
+	
+	protected abstract IOSApplication createApplication();
+	
+	@Override
+	@Selector("application:didFinishLaunchingWithOptions:")
+	public boolean applicationDidFinishLaunchingWithOptions(
+			UIApplication application, NSDictionary launchOptions) {
+		this.app = createApplication();
+		return app.didFinishLaunching(application, launchOptions);
+	}
+
+	@Override
+	@IsOptional
+	@Selector("applicationDidBecomeActive:")
+	public void applicationDidBecomeActive(UIApplication application) {
+		app.didBecomeActive(application);
+	}
+
+	@Override
+	@IsOptional
+	@Selector("applicationWillResignActive:")
+	public void applicationWillResignActive(UIApplication application) {
+		app.willResignActive(application);
+	}
+
+	@Override
+	@IsOptional
+	@Selector("applicationWillTerminate:")
+	public void applicationWillTerminate(UIApplication application) {
+		app.willTerminate(application);
+	}
+	
+	static {
+		NatJ.register();
+	}
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didChangeStatusBarFrame:")
+	public native void applicationDidChangeStatusBarFrame(
+			UIApplication application, @ByValue CGRect oldStatusBarFrame);
+
+	@NotImplemented
+	@IsOptional
+	@Selector("application:didChangeStatusBarOrientation:")
+	public native void applicationDidChangeStatusBarOrientation(
+			UIApplication application, int oldStatusBarOrientation);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didDecodeRestorableStateWithCoder:")
+	public native void applicationDidDecodeRestorableStateWithCoder(
+			UIApplication application, NSCoder coder);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didFailToRegisterForRemoteNotificationsWithError:")
+	public native void applicationDidFailToRegisterForRemoteNotificationsWithError(
+			UIApplication application, NSError error);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didReceiveLocalNotification:")
+	public native void applicationDidReceiveLocalNotification(
+			UIApplication application, UILocalNotification notification);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didReceiveRemoteNotification:")
+	public native void applicationDidReceiveRemoteNotification(
+			UIApplication application, NSDictionary userInfo);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:didRegisterForRemoteNotificationsWithDeviceToken:")
+	public native void applicationDidRegisterForRemoteNotificationsWithDeviceToken(
+			UIApplication application, NSData deviceToken);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:handleOpenURL:")
+	public native boolean applicationHandleOpenURL(UIApplication application,
+			NSURL url);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:openURL:sourceApplication:annotation:")
+	public native boolean applicationOpenURLSourceApplicationAnnotation(
+			UIApplication application, NSURL url, String sourceApplication,
+			Object annotation);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:shouldRestoreApplicationState:")
+	public native boolean applicationShouldRestoreApplicationState(
+			UIApplication application, NSCoder coder);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:shouldSaveApplicationState:")
+	public native boolean applicationShouldSaveApplicationState(
+			UIApplication application, NSCoder coder);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:supportedInterfaceOrientationsForWindow:")
+	public native long applicationSupportedInterfaceOrientationsForWindow(
+			UIApplication application, UIWindow window);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:viewControllerWithRestorationIdentifierPath:coder:")
+	public native UIViewController applicationViewControllerWithRestorationIdentifierPathCoder(
+			UIApplication application, NSArray identifierComponents,
+			NSCoder coder);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:willChangeStatusBarFrame:")
+	public native void applicationWillChangeStatusBarFrame(
+			UIApplication application, @ByValue CGRect newStatusBarFrame);
+
+	@NotImplemented
+	@IsOptional
+	@Selector("application:willChangeStatusBarOrientation:duration:")
+	public native void applicationWillChangeStatusBarOrientationDuration(
+			UIApplication application, int newStatusBarOrientation,
+			double duration);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:willEncodeRestorableStateWithCoder:")
+	public native void applicationWillEncodeRestorableStateWithCoder(
+			UIApplication application, NSCoder coder);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("application:willFinishLaunchingWithOptions:")
+	public native boolean applicationWillFinishLaunchingWithOptions(
+			UIApplication application, NSDictionary launchOptions);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationDidEnterBackground:")
+	public native void applicationDidEnterBackground(UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationDidFinishLaunching:")
+	public native void applicationDidFinishLaunching(UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationDidReceiveMemoryWarning:")
+	public native void applicationDidReceiveMemoryWarning(
+			UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationProtectedDataDidBecomeAvailable:")
+	public native void applicationProtectedDataDidBecomeAvailable(
+			UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationProtectedDataWillBecomeUnavailable:")
+	public native void applicationProtectedDataWillBecomeUnavailable(
+			UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationSignificantTimeChange:")
+	public native void applicationSignificantTimeChange(
+			UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("applicationWillEnterForeground:")
+	public native void applicationWillEnterForeground(UIApplication application);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("setWindow:")
+	public native void setWindow(UIWindow value);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("window")
+	public native UIWindow window();
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSApplicationDelegate alloc();
+
+	@Generated("NatJ")
+	protected IOSApplicationDelegate(Pointer peer) {
+		super(peer);
+	}
+
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSAudio.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSAudio.java
new file mode 100644
index 0000000..23e844d
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSAudio.java
@@ -0,0 +1,68 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.objectal.OALAudioTrack;
+import ios.objectal.OALSimpleAudio;
+
+import com.badlogic.gdx.Audio;
+import com.badlogic.gdx.audio.AudioDevice;
+import com.badlogic.gdx.audio.AudioRecorder;
+import com.badlogic.gdx.audio.Music;
+import com.badlogic.gdx.audio.Sound;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class IOSAudio implements Audio {
+
+	public IOSAudio(IOSApplicationConfiguration config) {
+		OALSimpleAudio.sharedInstance().setAllowIpod(config.allowIpod);
+		OALSimpleAudio.sharedInstance().setHonorSilentSwitch(true);
+	}
+	
+	@Override
+	public AudioDevice newAudioDevice (int samplingRate, boolean isMono) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public AudioRecorder newAudioRecorder (int samplingRate, boolean isMono) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public Sound newSound (FileHandle fileHandle) {
+		return new IOSSound(fileHandle);
+	}
+
+	@Override
+	public Music newMusic (FileHandle fileHandle) {
+		String path = fileHandle.file().getPath().replace('\\', '/');
+		OALAudioTrack track = OALAudioTrack.alloc().init();
+		if (track != null) {
+			if (track.preloadFile(path)) {
+				IOSMusic iOSMusic = IOSMusic.alloc().init();
+				iOSMusic.iOSMusic(track);
+				return iOSMusic;
+			}
+		}
+		throw new GdxRuntimeException("Error opening music file at " + path);
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSClipboard.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSClipboard.java
new file mode 100644
index 0000000..e4b2439
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSClipboard.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import com.badlogic.gdx.utils.Clipboard;
+
+public class IOSClipboard implements Clipboard {
+
+	@Override
+	public String getContents() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public void setContents(String arg0) {
+		// TODO Auto-generated method stub
+		
+	}
+
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFileHandle.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFileHandle.java
new file mode 100644
index 0000000..297bed0
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFileHandle.java
@@ -0,0 +1,81 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStream;
+
+import com.badlogic.gdx.Files.FileType;
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class IOSFileHandle extends FileHandle {
+	protected IOSFileHandle (String fileName, FileType type) {
+		super(fileName, type);
+	}
+
+	protected IOSFileHandle (File file, FileType type) {
+		super(file, type);
+	}
+
+	public FileHandle child (String name) {
+		if (file.getPath().length() == 0) return new IOSFileHandle(new File(name), type);
+		return new IOSFileHandle(new File(file, name), type);
+	}
+
+	public FileHandle parent () {
+		File parent = file.getParentFile();
+		if (parent == null) {
+			if (type == FileType.Absolute)
+				parent = new File("/");
+			else
+				parent = new File("");
+		}
+		return new IOSFileHandle(parent, type);
+	}
+
+	public FileHandle sibling (String name) {
+		if (file.getPath().length() == 0) throw new GdxRuntimeException("Cannot get the sibling of the root.");
+		return new IOSFileHandle(new File(file.getParent(), name), type);
+	}
+
+	public File file () {
+		if (type == FileType.Internal) return new File(IOSFiles.internalPath, file.getPath());
+		if (type == FileType.External) return new File(IOSFiles.externalPath, file.getPath());
+		if (type == FileType.Local) return new File(IOSFiles.localPath, file.getPath());
+		return file;
+	}
+	
+	@Override
+	public InputStream read () {
+		if (type == FileType.Classpath
+				|| (type == FileType.Local && !file().exists())) {
+			InputStream input = FileHandle.class.getResourceAsStream("/" + file.getPath().replace('\\', '/'));
+			if (input == null) throw new GdxRuntimeException("File not found: " + file + " (" + type + ")");
+			return input;
+		}
+		try {
+			return new FileInputStream(file());
+		} catch (Exception ex) {
+			if (file().isDirectory())
+				throw new GdxRuntimeException("Cannot open a stream to a directory: " + file + " (" + type + ")", ex);
+			throw new GdxRuntimeException("Error reading file: " + file + " (" + type + ")", ex);
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFiles.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFiles.java
new file mode 100644
index 0000000..2432a54
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSFiles.java
@@ -0,0 +1,85 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.foundation.NSBundle;
+
+import com.badlogic.gdx.Files;
+import com.badlogic.gdx.files.FileHandle;
+
+public class IOSFiles implements Files {
+
+	static final String appDir = System.getenv("HOME");
+	static final String externalPath = appDir + "/Documents";
+	static final String localPath = appDir + "/Library/local";
+	static final String internalPath = NSBundle.mainBundle().bundlePath();
+	
+	public IOSFiles() {
+		new FileHandle(externalPath).mkdirs();
+		new FileHandle(localPath).mkdirs();
+	}
+	
+	@Override
+	public FileHandle getFileHandle (String fileName, FileType type) {
+		return new IOSFileHandle(fileName, type);
+	}
+
+	@Override
+	public FileHandle classpath (String path) {
+		return new IOSFileHandle(path, FileType.Classpath);
+	}
+
+	@Override
+	public FileHandle internal (String path) {
+		return new IOSFileHandle(path, FileType.Internal);
+	}
+
+	@Override
+	public FileHandle external (String path) {
+		return new IOSFileHandle(path, FileType.External);
+	}
+
+	@Override
+	public FileHandle absolute (String path) {
+		return new IOSFileHandle(path, FileType.Absolute);
+	}
+
+	@Override
+	public FileHandle local (String path) {
+		return new IOSFileHandle(path, FileType.Local);
+	}
+
+	@Override
+	public String getExternalStoragePath() {
+		return externalPath;
+	}
+
+	@Override
+	public boolean isExternalStorageAvailable() {
+		return true;
+	}
+
+	@Override
+	public String getLocalStoragePath() {
+		return localPath;
+	}
+
+	@Override
+	public boolean isLocalStorageAvailable() {
+		return true;
+	}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGLKView.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGLKView.java
new file mode 100644
index 0000000..070c362
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGLKView.java
@@ -0,0 +1,98 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.coregraphics.struct.CGRect;
+import ios.foundation.NSSet;
+import ios.glkit.GLKView;
+import ios.opengles.EAGLContext;
+import ios.uikit.UIEvent;
+
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.NatJ;
+
+public class IOSGLKView extends GLKView {
+
+	private IOSGraphics graphics = null;
+
+	static {
+		NatJ.register();
+	}
+	
+	@Generated
+	@Selector("init")
+	public native IOSGLKView init();
+	
+	@Override
+	@Selector("initWithFrame:context:")
+	public IOSGLKView initWithFrameContext(CGRect frame,
+			EAGLContext context) {
+		super.initWithFrameContext(frame, context);
+		return this;
+	}
+
+	void initIOSGLKView(IOSGraphics graphics) {
+		this.graphics = graphics;
+	}
+	
+	@Override
+	@Selector("touchesBegan:withEvent:")
+	public void touchesBeganWithEvent(NSSet touches, UIEvent event) {
+		super.touchesBeganWithEvent(touches, event);
+		graphics.input.touchDown(touches, event);
+	}
+
+	@Override
+	@Selector("touchesCancelled:withEvent:")
+	public void touchesCancelledWithEvent(NSSet touches, UIEvent event) {
+		super.touchesCancelledWithEvent(touches, event);
+		graphics.input.touchUp(touches, event);
+	}
+
+	@Override
+	@Selector("touchesEnded:withEvent:")
+	public void touchesEndedWithEvent(NSSet touches, UIEvent event) {
+		super.touchesEndedWithEvent(touches, event);
+		graphics.input.touchUp(touches, event);
+	}
+
+	@Override
+	@Selector("touchesMoved:withEvent:")
+	public void touchesMovedWithEvent(NSSet touches, UIEvent event) {
+		super.touchesMovedWithEvent(touches, event);
+		graphics.input.touchMoved(touches, event);
+	}
+
+	@Override
+	@Selector("drawRect:")
+	public void drawRect(@ByValue CGRect rect) {
+		graphics.glkViewDrawInRect(this, rect);
+	}
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSGLKView alloc();
+
+	@Generated("NatJ")
+	protected IOSGLKView(Pointer peer) {
+		super(peer);
+	}
+
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGraphics.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGraphics.java
new file mode 100644
index 0000000..3451712
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSGraphics.java
@@ -0,0 +1,509 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import com.badlogic.gdx.Application;
+import com.badlogic.gdx.graphics.Cursor;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.glutils.GLVersion;
+import ios.NSObject;
+import ios.coregraphics.struct.CGPoint;
+import ios.coregraphics.struct.CGRect;
+import ios.coregraphics.struct.CGSize;
+import ios.glkit.GLKView;
+import ios.glkit.GLKViewController;
+import ios.glkit.protocol.GLKViewControllerDelegate;
+import ios.glkit.protocol.GLKViewDelegate;
+import ios.glkit.enums.GLKViewDrawableColorFormat;
+import ios.glkit.enums.GLKViewDrawableDepthFormat;
+import ios.glkit.enums.GLKViewDrawableMultisample;
+import ios.glkit.enums.GLKViewDrawableStencilFormat;
+import ios.opengles.EAGLContext;
+import ios.uikit.UIDevice;
+import ios.uikit.UIScreen;
+import ios.uikit.enums.UIUserInterfaceIdiom;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Graphics;
+import com.badlogic.gdx.LifecycleListener;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.GL30;
+import com.badlogic.gdx.utils.Array;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.objc.ann.IsOptional;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.NatJ;
+
+public class IOSGraphics extends NSObject implements Graphics, GLKViewDelegate, GLKViewControllerDelegate {
+
+	private static final String tag = "IOSGraphics";
+
+	IOSApplication app;
+	IOSInput input;
+	GL20 gl20;
+	int width;
+	int height;
+	long lastFrameTime;
+	float deltaTime;
+	long framesStart;
+	int frames;
+	int fps;
+	BufferFormat bufferFormat;
+	String extensions;
+
+	private float ppiX = 0;
+	private float ppiY = 0;
+	private float ppcX = 0;
+	private float ppcY = 0;
+	private float density = 1;
+
+	volatile boolean paused;
+	private long frameId = -1;
+	boolean wasPaused;
+
+	IOSApplicationConfiguration config;
+	EAGLContext context;
+	IOSGLKView view;
+	IOSUIViewController viewController;
+   GLVersion glVersion;
+
+	static {
+		NatJ.register();
+	}
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSGraphics alloc();
+
+	@Generated("NatJ")
+	protected IOSGraphics(Pointer peer) {
+		super(peer);
+	}
+	
+	@Selector("init")
+	public native IOSGraphics init();
+	
+	public void iOSGraphics(CGSize bounds, float scale, IOSApplication app, IOSApplicationConfiguration config, IOSInput input, GL20 gl20) {
+		this.config = config;
+		// setup view and OpenGL
+		width = (int) bounds.width();
+		height = (int) bounds.height();
+		app.debug(tag, bounds.width() + "x" + bounds.height() + ", " + UIScreen.mainScreen().scale());
+		this.gl20 = gl20;
+
+		//context = EAGLContext.alloc().initWithAPI(Enums.kEAGLRenderingAPIOpenGLES2);
+		context = EAGLContext.alloc().initWithAPI(2);
+
+		view = IOSGLKView.alloc();
+		CGRect rect = new CGRect(new CGPoint(0, 0), bounds);
+		view.initWithFrameContext(rect, context);
+		view.initIOSGLKView(this);
+		
+		view.setDelegate(this);
+		view.setDrawableColorFormat(config.colorFormat);
+		view.setDrawableDepthFormat(config.depthFormat);
+		view.setDrawableStencilFormat(config.stencilFormat);
+		view.setDrawableMultisample(config.multisample);
+		view.setMultipleTouchEnabled(true);
+		
+		viewController = IOSUIViewController.alloc().init();
+		viewController.iOSUIViewController(app, this);
+		
+		viewController.setView(view);
+		viewController.setDelegate(this);
+		viewController.setPreferredFramesPerSecond(config.preferredFramesPerSecond);
+
+		this.app = app;
+		this.input = input;
+
+		int r = 0, g = 0, b = 0, a = 0, depth = 0, stencil = 0, samples = 0;
+		if(config.colorFormat == GLKViewDrawableColorFormat.RGB565) {
+			r = 5; g = 6; b = 5; a = 0;
+		} else {
+			r = g = b = a = 8;
+		}
+		if(config.depthFormat == GLKViewDrawableDepthFormat.Format16) {
+			depth = 16;
+		} else if (config.depthFormat == GLKViewDrawableDepthFormat.Format24) {
+			depth = 24;
+		} else {
+			depth = 0;
+		}
+		if(config.stencilFormat == GLKViewDrawableStencilFormat.Format8) {
+			stencil = 8;
+		}
+		if(config.multisample == GLKViewDrawableMultisample.Multisample4X) {
+			samples = 4;
+		}
+		bufferFormat = new BufferFormat(r, g, b, a, depth, stencil, samples, false);
+		this.gl20 = gl20;
+
+		// determine display density and PPI (PPI values via Wikipedia!)
+		density = 1f;
+
+		//float scale = UIScreen.mainScreen().scale();
+		app.debug(tag, "Calculating density, UIScreen.mainScreen.scale: " + scale);
+		if (scale == 2) density = 2f;
+		if (scale == 3) density = 3f;
+
+		int ppi;
+		if (UIDevice.currentDevice().userInterfaceIdiom() == UIUserInterfaceIdiom.Pad) {
+			// iPad
+			ppi = Math.round(density * 132);
+		} else {
+			// iPhone or iPodTouch
+			ppi = Math.round(density * 163);
+		}
+		ppiX = ppi;
+		ppiY = ppi;
+		ppcX = ppiX / 2.54f;
+		ppcY = ppiY / 2.54f;
+		app.debug(tag, "Display: ppi=" + ppi + ", density=" + density);
+
+		// time + FPS
+		lastFrameTime = System.nanoTime();
+		framesStart = lastFrameTime;
+
+		paused = false;
+		wasPaused = true;
+	}
+
+	public void resume() {
+		paused = false;
+	}
+
+	public void pause() {
+		paused = true;
+	}
+
+	boolean created = false;
+	
+	@Override
+	@Selector("glkView:drawInRect:")
+	public void glkViewDrawInRect(GLKView view, @ByValue CGRect rect) {
+		if(!created) {
+			app.graphics.makeCurrent();
+			app.listener.create();
+			app.listener.resize(width, height);
+			gl20.glViewport(0, 0, width, height);
+			app.listener.create();
+			app.listener.resize(width, height);
+			String versionString = gl20.glGetString(GL20.GL_VERSION);
+			String vendorString = gl20.glGetString(GL20.GL_VENDOR);
+			String rendererString = gl20.glGetString(GL20.GL_RENDERER);
+			glVersion = new GLVersion(Application.ApplicationType.iOS, versionString, vendorString, rendererString);
+			created = true;
+		}
+		if (paused) {
+			if (!wasPaused) {
+				Array<LifecycleListener> listeners = app.lifecycleListeners;
+				synchronized (listeners) {
+					for (LifecycleListener listener : listeners) {
+						listener.pause();
+					}
+				}
+				app.listener.pause();
+				wasPaused = true;
+			}
+			return;
+		} else {
+			if (wasPaused) {
+				Array<LifecycleListener> listeners = app.lifecycleListeners;
+				synchronized (listeners) {
+					for (LifecycleListener listener : listeners) {
+						listener.resume();
+					}
+				}
+				app.listener.resume();
+				wasPaused = false;
+			}
+		}
+
+		long time = System.nanoTime();
+		deltaTime = (time - lastFrameTime) / 1000000000.0f;
+		lastFrameTime = time;
+
+		frames++;
+		if (time - framesStart >= 1000000000l) {
+			framesStart = time;
+			fps = frames;
+			frames = 0;
+		}
+
+		makeCurrent();
+		input.processEvents();
+		frameId ++;
+		app.listener.render();
+	}
+
+	void makeCurrent() {
+		EAGLContext.setCurrentContext(context);
+	}
+
+	@Override
+	public GLVersion getGLVersion() {
+		return glVersion;
+	}
+
+	@Override
+	public void setUndecorated(boolean undecorated) {
+	
+	}
+
+	@Override
+	public void setResizable(boolean resizable) {
+	
+	}
+
+	@Selector("glkViewController:willPause:")
+	@IsOptional
+	public void glkViewControllerWillPause(GLKViewController controller,
+			boolean pause) {
+		if (pause) {
+			pause();
+		} else {
+			resume();
+		}
+	}
+
+	@Selector("glkViewControllerUpdate:")
+	public void glkViewControllerUpdate(GLKViewController controller) {
+		makeCurrent();
+		app.processRunnables();
+	}
+
+	@Override
+	public GL20 getGL20() {
+		return gl20;
+	}
+
+	@Override
+	public int getWidth() {
+		return width;
+	}
+
+	@Override
+	public int getHeight() {
+		return height;
+	}
+
+	@Override
+	public int getBackBufferWidth() {
+		return 0;
+	}
+
+	@Override
+	public int getBackBufferHeight() {
+		return 0;
+	}
+
+	@Override
+	public float getDeltaTime() {
+		return deltaTime;
+	}
+
+	@Override
+	public float getRawDeltaTime() {
+		return deltaTime;
+	}
+
+	@Override
+	public int getFramesPerSecond() {
+		return fps;
+	}
+
+	@Override
+	public GraphicsType getType() {
+		return GraphicsType.iOSGL;
+	}
+
+	@Override
+	public float getPpiX() {
+		return ppiX;
+	}
+
+	@Override
+	public float getPpiY() {
+		return ppiY;
+	}
+
+	@Override
+	public float getPpcX() {
+		return ppcX;
+	}
+
+	@Override
+	public float getPpcY() {
+		return ppcY;
+	}
+
+	/**
+	 * Returns the display density.
+	 * 
+	 * @return 1.0f for non-retina devices, 2.0f for retina devices.
+	 */
+	@Override
+	public float getDensity() {
+		return density;
+	}
+
+	@Override
+	public boolean supportsDisplayModeChange() {
+		return false;
+	}
+
+	@Override
+	public Monitor getPrimaryMonitor() {
+		return null;
+	}
+
+	@Override
+	public Monitor getMonitor() {
+		return null;
+	}
+
+	@Override
+	public Monitor[] getMonitors() {
+		return new Monitor[0];
+	}
+
+	@Override
+	public DisplayMode[] getDisplayModes() {
+		return new DisplayMode[] { getDesktopDisplayMode() };
+	}
+
+	@Override
+	public DisplayMode[] getDisplayModes(Monitor monitor) {
+		return new DisplayMode[0];
+	}
+
+	@Override
+	public DisplayMode getDisplayMode() {
+		return null;
+	}
+
+	@Override
+	public DisplayMode getDisplayMode(Monitor monitor) {
+		return null;
+	}
+
+	@Override
+	public boolean setFullscreenMode(DisplayMode displayMode) {
+		return false;
+	}
+
+	@Override
+	public boolean setWindowedMode(int width, int height) {
+		return false;
+	}
+
+	public DisplayMode getDesktopDisplayMode() {
+		return new IOSDisplayMode(getWidth(), getHeight(), config.preferredFramesPerSecond, bufferFormat.r + bufferFormat.g + bufferFormat.b + bufferFormat.a);
+	}
+
+	private class IOSDisplayMode extends DisplayMode {
+		protected IOSDisplayMode(int width, int height, int refreshRate,
+				int bitsPerPixel) {
+			super(width, height, refreshRate, bitsPerPixel);
+		}
+	}
+
+	public boolean setDisplayMode(DisplayMode displayMode) {
+		return false;
+	}
+
+	public boolean setDisplayMode(int width, int height, boolean fullscreen) {
+		return false;
+	}
+
+	@Override
+	public void setTitle(String title) {
+	}
+
+	@Override
+	public void setVSync(boolean vsync) {
+	}
+
+	@Override
+	public BufferFormat getBufferFormat() {
+		return bufferFormat;
+	}
+
+	@Override
+	public boolean supportsExtension(String extension) {
+		if (extensions == null) {
+			extensions = Gdx.gl.glGetString(GL20.GL_EXTENSIONS);
+		}
+		return extensions.contains(extension);
+	}
+
+	@Override
+	public boolean isFullscreen() {
+		return true;
+	}
+
+	@Override
+	public Cursor newCursor(Pixmap pixmap, int xHotspot, int yHotspot) {
+		return null;
+	}
+
+	@Override
+	public void setCursor(Cursor cursor) {
+
+	}
+
+	@Override
+	public void setSystemCursor(Cursor.SystemCursor systemCursor) {
+
+	}
+
+	@Override
+	public boolean isGL30Available () {
+		return false;
+	}
+
+	@Override
+	public GL30 getGL30 () {
+		return null;
+	}
+
+	@Override
+	public void setContinuousRendering(boolean isContinuous) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public boolean isContinuousRendering() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public void requestRendering() {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public long getFrameId() {
+		return frameId;
+	}
+	
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSInput.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSInput.java
new file mode 100644
index 0000000..fed83fb
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSInput.java
@@ -0,0 +1,557 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import com.badlogic.gdx.graphics.Pixmap;
+
+import ios.NSObject;
+import ios.coregraphics.struct.CGPoint;
+import ios.foundation.NSArray;
+import ios.foundation.NSSet;
+import ios.uikit.UIAcceleration;
+import ios.uikit.UIAccelerometer;
+import ios.uikit.protocol.UIAccelerometerDelegate;
+import ios.uikit.UIAlertView;
+import ios.uikit.protocol.UIAlertViewDelegate;
+import ios.uikit.enums.UIAlertViewStyle;
+import ios.uikit.UIApplication;
+import ios.uikit.UIEvent;
+import ios.uikit.enums.UIInterfaceOrientation;
+import ios.uikit.UITextField;
+import ios.uikit.UITouch;
+import ios.uikit.enums.UITouchPhase;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Input;
+import com.badlogic.gdx.InputProcessor;
+import com.badlogic.gdx.utils.Array;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+import com.badlogic.gdx.utils.Pool;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.objc.ann.IsOptional;
+import com.intel.inde.moe.natj.objc.ann.NotImplemented;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+
+public class IOSInput extends NSObject implements Input, UIAccelerometerDelegate, UIAlertViewDelegate {
+	
+	static final int MAX_TOUCHES = 20;
+	
+	IOSApplication app;
+	IOSApplicationConfiguration config;
+	int[] deltaX = new int[MAX_TOUCHES];
+	int[] deltaY = new int[MAX_TOUCHES];
+	int[] touchX = new int[MAX_TOUCHES];
+	int[] touchY = new int[MAX_TOUCHES];
+	// we store the pointer to the UITouch struct here, or 0
+	long[] touchDown = new long[MAX_TOUCHES];
+	int numTouched = 0;
+	boolean justTouched = false;
+	Pool<TouchEvent> touchEventPool = new Pool<TouchEvent>() {
+		@Override
+		protected TouchEvent newObject() {
+			return new TouchEvent();
+		}
+	};
+	Array<TouchEvent> touchEvents = new Array<TouchEvent>();
+	TouchEvent currentEvent = null;
+	float[] acceleration = new float[3];
+	InputProcessor inputProcessor = null;
+
+	void iOSInput(IOSApplication app) {
+		this.app = app;
+		this.config = app.config;
+	}
+	
+	void setupPeripherals() {
+		setupAccelerometer();
+		setupCompass();
+	}
+
+	private void setupCompass () {
+		if(config.useCompass) {
+			// FIXME implement compass
+		}
+	}
+
+	private void setupAccelerometer() {
+		if(config.useAccelerometer) {
+			UIAccelerometer.sharedAccelerometer().setDelegate(this);
+			UIAccelerometer.sharedAccelerometer().setUpdateInterval(config.accelerometerUpdate);
+		}
+	}
+
+	@Override
+	public float getAccelerometerX() {
+		return acceleration[0];
+	}
+
+	@Override
+	public float getAccelerometerY() {
+		return acceleration[1];
+	}
+
+	@Override
+	public float getAccelerometerZ() {
+		return acceleration[2];
+	}
+
+	@Override
+	public float getGyroscopeX() {
+		return 0;
+	}
+
+	@Override
+	public float getGyroscopeY() {
+		return 0;
+	}
+
+	@Override
+	public float getGyroscopeZ() {
+		return 0;
+	}
+
+	@Override
+	public int getX() {
+		return touchX[0];
+	}
+
+	@Override
+	public int getX(int pointer) {
+		return touchX[pointer];
+	}
+
+	@Override
+	public int getDeltaX() {
+		return deltaX[0];
+	}
+
+	@Override
+	public int getDeltaX(int pointer) {
+		return deltaX[pointer];
+	}
+
+	@Override
+	public int getY() {
+		return touchY[0];
+	}
+
+	@Override
+	public int getY(int pointer) {
+		return touchY[pointer];
+	}
+
+	@Override
+	public int getDeltaY() {
+		return deltaY[0];
+	}
+
+	@Override
+	public int getDeltaY(int pointer) {
+		return deltaY[pointer];
+	}
+
+	@Override
+	public boolean isTouched() {
+		for (int pointer = 0; pointer < MAX_TOUCHES; pointer++) {
+			if (touchDown[pointer] != 0) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	@Override
+	public boolean justTouched() {
+		return justTouched;
+	}
+
+	@Override
+	public boolean isTouched(int pointer) {
+		return touchDown[pointer] != 0;
+	}
+
+	@Override
+	public boolean isButtonPressed(int button) {
+		return button == Buttons.LEFT && numTouched > 0;
+	}
+
+	@Override
+	public boolean isKeyPressed(int key) {
+		return false;
+	}
+
+	@Override
+	public void getTextInput(TextInputListener listener, String title, String text, String hint) {
+		final UIAlertView uiAlertView = buildUIAlertView(listener, title, text, hint);
+		uiAlertView.show();
+	}
+
+	TextInputListener alertViewListener = null;
+	
+	private UIAlertView buildUIAlertView (final TextInputListener listener, String title, String text, String placeholder) {
+		// build the view
+		alertViewListener = listener;
+		final UIAlertView uiAlertView = UIAlertView.alloc().init();
+		uiAlertView.setTitle(title);
+		uiAlertView.addButtonWithTitle("Cancel");
+		uiAlertView.addButtonWithTitle("Ok");
+		uiAlertView.setAlertViewStyle(UIAlertViewStyle.PlainTextInput);
+		uiAlertView.setDelegate(this);
+
+		UITextField textField = uiAlertView.textFieldAtIndex(0);
+		textField.setPlaceholder(placeholder);
+		textField.setText(text);
+
+		return uiAlertView;
+	}
+
+	public void getPlaceholderTextInput(TextInputListener listener, String title, String placeholder) {
+		final UIAlertView uiAlertView = buildUIAlertView(listener, title, null, placeholder);
+		uiAlertView.show();
+	}
+
+	@Override
+	public void setOnscreenKeyboardVisible(boolean visible) {
+	}
+
+	@Override
+	public long getCurrentEventTime() {
+		return currentEvent.timestamp;
+	}
+
+	@Override
+	public void setCatchBackKey(boolean catchBack) {
+	}
+
+	@Override
+	public void setCatchMenuKey(boolean catchMenu) {
+	}
+
+	@Override
+	public boolean isCatchMenuKey() {
+		return false;
+	}
+
+	@Override
+	public void setInputProcessor(InputProcessor processor) {
+		this.inputProcessor = processor;
+	}
+
+	@Override
+	public InputProcessor getInputProcessor() {
+		return inputProcessor;
+	}
+
+	@Override
+	public boolean isPeripheralAvailable(Peripheral peripheral) {
+		if(peripheral == Peripheral.Accelerometer && config.useAccelerometer) return true;
+		if(peripheral == Peripheral.MultitouchScreen) return true;
+		return false;
+	}
+
+	@Override
+	public int getRotation() {
+		int orientation = (int) (app.graphics.viewController != null
+                            ? app.graphics.viewController.interfaceOrientation()
+                            : UIApplication.sharedApplication().statusBarOrientation());
+		// we measure orientation counter clockwise, just like on Android
+		if(orientation == UIInterfaceOrientation.Portrait) return 0;
+		if(orientation == UIInterfaceOrientation.LandscapeLeft) return 270;
+		if(orientation == UIInterfaceOrientation.PortraitUpsideDown) return 180;
+		if(orientation == UIInterfaceOrientation.LandscapeRight) return 90;
+		return 0;
+	}
+
+	@Override
+	public Orientation getNativeOrientation() {
+		return Orientation.Portrait;
+	}
+
+	@Override
+	public void setCursorCatched(boolean catched) {
+	}
+
+	@Override
+	public boolean isCursorCatched() {
+		return false;
+	}
+
+	@Override
+	public void setCursorPosition(int x, int y) {
+	}
+
+  public void setCursorImage(Pixmap pixmap, int xHotspot, int yHotspot) {
+  }
+
+  public void touchDown(NSSet touches, UIEvent event) {
+		toTouchEvents(touches, event);
+		Gdx.graphics.requestRendering();
+	}
+
+	public void touchUp(NSSet touches, UIEvent event) {
+		toTouchEvents(touches, event);
+		Gdx.graphics.requestRendering();
+	}
+
+	public void touchMoved(NSSet touches, UIEvent event) {
+		toTouchEvents(touches, event);
+		Gdx.graphics.requestRendering();
+	}
+	
+	void processEvents() {
+		synchronized(touchEvents) {
+			justTouched = false;
+			for(TouchEvent event: touchEvents) {
+				currentEvent = event;
+				switch(event.phase) {
+				case (int) UITouchPhase.Began:
+					if(inputProcessor != null) inputProcessor.touchDown(event.x, event.y, event.pointer, Buttons.LEFT);
+					if(numTouched == 1)
+						justTouched = true;
+					break;
+				case (int) UITouchPhase.Cancelled:
+				case (int) UITouchPhase.Ended:
+					if(inputProcessor != null) inputProcessor.touchUp(event.x, event.y, event.pointer, Buttons.LEFT);
+					break;
+				case (int) UITouchPhase.Moved:
+				case (int) UITouchPhase.Stationary:
+					if(inputProcessor != null) inputProcessor.touchDragged(event.x, event.y, event.pointer);
+					break;
+				}
+			}
+			touchEventPool.freeAll(touchEvents);
+			touchEvents.clear();
+		}
+	}
+	
+	private void toTouchEvents(NSSet touches, UIEvent uiEvent) {
+		NSArray list = touches.allObjects();
+		for(Object o : list) {
+			UITouch touch = (UITouch)o;
+			CGPoint loc = touch.locationInView(touch.view());
+			synchronized(touchEvents) {
+				TouchEvent event = touchEventPool.obtain();
+				event.x = (int)(loc.x() * app.displayScaleFactor);
+				event.y = (int)(loc.y() * app.displayScaleFactor);
+				event.phase = (int) touch.phase();
+				event.timestamp = (long)(touch.timestamp() * 1000000000);
+				touchEvents.add(event);
+				
+				if(touch.phase() == UITouchPhase.Began) {					
+					event.pointer = getFreePointer();
+					touchDown[event.pointer] = touch.getPeerPointer();
+					touchX[event.pointer] = event.x;
+					touchY[event.pointer] = event.y;
+					deltaX[event.pointer] = 0;
+					deltaY[event.pointer] = 0; 
+					numTouched++;
+				}
+				
+				if(touch.phase() == UITouchPhase.Moved ||
+					touch.phase() == UITouchPhase.Stationary) {
+					event.pointer = getFreePointer();
+					deltaX[event.pointer] = event.x - touchX[event.pointer];
+					deltaY[event.pointer] = event.y - touchY[event.pointer]; 
+					touchX[event.pointer] = event.x;
+					touchY[event.pointer] = event.y;
+				}
+				
+				if(touch.phase() == UITouchPhase.Cancelled ||
+					touch.phase() == UITouchPhase.Ended) {					
+					event.pointer = findPointer(touch);
+					touchDown[event.pointer] = 0;
+					touchX[event.pointer] = event.x;
+					touchY[event.pointer] = event.y;
+					deltaX[event.pointer] = 0;
+					deltaY[event.pointer] = 0;
+					numTouched--;
+				}
+			}
+		}	
+	}
+	
+	static class TouchEvent {
+		int phase;
+		
+		long timestamp;
+		int x, y;
+		int pointer;
+	}
+	
+	
+	/** UIAccelerometerDelegate **/
+	
+	@Override
+	@Selector("accelerometer:didAccelerate:")
+	public void accelerometerDidAccelerate(
+			UIAccelerometer accelerometer, UIAcceleration values) {
+		
+		float x = (float)values.x() * 10;
+		float y = (float)values.y() * 10;
+		float z = (float)values.z() * 10;
+			
+		acceleration[0] = -x;
+		acceleration[1] = -y;
+		acceleration[2] = -z;
+		
+	}
+	
+	/** UIAlertViewDelegate **/
+	@Selector("alertView:clickedButtonAtIndex:")
+	public void alertViewClickedButtonAtIndex(UIAlertView alertView,
+			int buttonIndex) {
+		
+		if (buttonIndex == 0) {
+			// user clicked "Cancel" button
+			alertViewListener.canceled();
+		} else if (buttonIndex == 1) {
+			// user clicked "Ok" button
+			UITextField textField = alertView.textFieldAtIndex(0);
+			alertViewListener.input(textField.text());
+		}
+
+	}
+	
+	@Override
+	@Selector("alertViewCancel:")
+	public void alertViewCancel(UIAlertView alertView) {
+		
+		alertViewListener.canceled();
+
+	}
+
+	@NotImplemented
+	@IsOptional
+	@Selector("alertView:didDismissWithButtonIndex:")
+	public native void alertViewDidDismissWithButtonIndex(
+			UIAlertView alertView, int buttonIndex);
+
+	@NotImplemented
+	@IsOptional
+	@Selector("alertView:willDismissWithButtonIndex:")
+	public native void alertViewWillDismissWithButtonIndex(
+			UIAlertView alertView, int buttonIndex);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("alertViewShouldEnableFirstOtherButton:")
+	public native boolean alertViewShouldEnableFirstOtherButton(
+			UIAlertView alertView);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("didPresentAlertView:")
+	public native void didPresentAlertView(UIAlertView alertView);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("willPresentAlertView:")
+	public native void willPresentAlertView(UIAlertView alertView);
+	
+	
+	static {
+		NatJ.register();
+	}
+
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSInput alloc();
+	
+	@Selector("init")
+	public native IOSInput init();
+
+	@Generated("NatJ")
+	protected IOSInput(Pointer peer) {
+		super(peer);
+	}
+
+	@Override
+	public void vibrate(int milliseconds) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public void vibrate(long[] pattern, int repeat) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public void cancelVibrate() {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public float getAzimuth() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public float getPitch() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public float getRoll() {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	@Override
+	public void getRotationMatrix(float[] matrix) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	@Override
+	public boolean isKeyJustPressed(int key) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean isCatchBackKey() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+	
+	private int findPointer (UITouch touch) {
+		long ptr = touch.getPeerPointer();
+		for (int i = 0; i < touchDown.length; i++) {
+			if (touchDown[i] == ptr) return i;
+		}
+		throw new GdxRuntimeException("Couldn't find pointer id for touch event!");
+	}
+	
+	private int getFreePointer () {
+		for (int i = 0; i < touchDown.length; i++) {
+			if (touchDown[i] == 0) return i;
+		}
+		throw new GdxRuntimeException("Couldn't find free pointer id!");
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSMusic.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSMusic.java
new file mode 100644
index 0000000..bd7739e
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSMusic.java
@@ -0,0 +1,184 @@
+/*******************************************************************************
+ * Copyright 2013 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.NSObject;
+import ios.avfoundation.protocol.AVAudioPlayerDelegate;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.audio.Music;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.objc.ann.NotImplemented;
+
+import ios.foundation.NSError;
+import ios.objectal.OALAudioTrack;
+
+import com.intel.inde.moe.natj.objc.ann.IsOptional;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+
+import ios.avfoundation.AVAudioPlayer;
+
+public class IOSMusic extends NSObject implements Music, AVAudioPlayerDelegate {
+	
+	private OALAudioTrack track;
+	private OnCompletionListener onCompletionListener;
+	
+	static {
+		NatJ.register();
+	}
+	
+	@Selector("init")
+	public native IOSMusic init();
+	
+	public void iOSMusic(OALAudioTrack track) {
+		this.track = track;
+		this.track.setDelegate(this);
+	}
+
+	/** AVAudioPlayerDelegate **/
+	@Selector("audioPlayerDidFinishPlaying:successfully:")
+	public void audioPlayerDidFinishPlayingSuccessfully(AVAudioPlayer player,
+			boolean flag) {
+		
+		final OnCompletionListener listener = onCompletionListener;
+		if (listener != null) {
+			Gdx.app.postRunnable(new Runnable() {
+				@Override
+				public void run () {
+					listener.onCompletion(IOSMusic.this);
+				}
+			});
+		}
+		
+	}
+	
+	@Override
+	public void play () {
+		if (track.paused()) {
+			track.setPaused(false);
+		} else {
+			track.play();
+		}
+	}
+
+	@Override
+	public void pause () {
+		if (track.playing()) {
+			track.setPaused(true);
+		}
+	}
+
+	@Override
+	public void stop () {
+		track.stop();
+	}
+
+	@Override
+	public boolean isPlaying () {
+		return track.playing();
+	}
+
+	@Override
+	public void setLooping (boolean isLooping) {
+		track.setNumberOfLoops(isLooping ? -1 : 0);
+	}
+
+	@Override
+	public boolean isLooping () {
+		return track.numberOfLoops() == -1;
+	}
+
+	@Override
+	public void setVolume (float volume) {
+		track.setVolume(volume);
+	}
+
+	public void setPosition (float position) {
+		track.setCurrentTime(position / 1000);
+	}
+
+	@Override
+	public float getPosition () {
+		return (float) (track.currentTime() * 1000.0);
+	}
+
+	@Override
+	public void dispose () {
+		track.clear();
+	}
+
+	@Override
+	public float getVolume() {
+		return track.volume();
+	}
+
+	@Override
+	public void setPan(float pan, float volume) {
+		track.setPan(pan);
+		track.setVolume(volume);
+	}
+
+	@Override
+	public void setOnCompletionListener (OnCompletionListener listener) {
+		this.onCompletionListener = listener;
+	}
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("audioPlayerBeginInterruption:")
+	public native void audioPlayerBeginInterruption(AVAudioPlayer player);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("audioPlayerDecodeErrorDidOccur:error:")
+	public native void audioPlayerDecodeErrorDidOccurError(
+			AVAudioPlayer player, NSError error);
+
+	@NotImplemented
+	@Override
+	@IsOptional
+	@Selector("audioPlayerEndInterruption:")
+	@Deprecated
+	public native void audioPlayerEndInterruption(AVAudioPlayer player);
+
+	@NotImplemented
+	@IsOptional
+	@Selector("audioPlayerEndInterruption:withFlags:")
+	@Deprecated
+	public native void audioPlayerEndInterruptionWithFlags(
+			AVAudioPlayer player, int flags);
+
+	@NotImplemented
+	@IsOptional
+	@Selector("audioPlayerEndInterruption:withOptions:")
+	public native void audioPlayerEndInterruptionWithOptions(
+			AVAudioPlayer player, int flags);
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSMusic alloc();
+
+	@Generated("NatJ")
+	protected IOSMusic(Pointer peer) {
+		super(peer);
+	}
+	
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSNet.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSNet.java
new file mode 100644
index 0000000..4ed8211
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSNet.java
@@ -0,0 +1,69 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.foundation.NSURL;
+import ios.uikit.UIApplication;
+
+import com.badlogic.gdx.Net;
+import com.badlogic.gdx.net.NetJavaImpl;
+import com.badlogic.gdx.net.ServerSocket;
+import com.badlogic.gdx.net.ServerSocketHints;
+import com.badlogic.gdx.net.Socket;
+import com.badlogic.gdx.net.SocketHints;
+
+public class IOSNet implements Net {
+
+	NetJavaImpl netJavaImpl = new NetJavaImpl();
+	final UIApplication uiApp;
+
+	public IOSNet (IOSApplication app) {
+		uiApp = app.uiApp;
+	}
+
+	@Override
+	public void sendHttpRequest (HttpRequest httpRequest, HttpResponseListener httpResponseListener) {
+		netJavaImpl.sendHttpRequest(httpRequest, httpResponseListener);
+	}
+
+	@Override
+	public ServerSocket newServerSocket (Protocol protocol, int port, ServerSocketHints hints) {
+		return new IOSServerSocket(protocol, port, hints);
+	}
+
+	@Override
+	public Socket newClientSocket (Protocol protocol, String host, int port, SocketHints hints) {
+		return new IOSSocket(protocol, host, port, hints);
+	}
+
+	@Override
+	public boolean openURI(String URI) {
+		uiApp.openURL(NSURL.alloc().initWithString(URI));
+		return false;
+	}
+
+	@Override
+	public void cancelHttpRequest(HttpRequest httpRequest) {
+		netJavaImpl.cancelHttpRequest(httpRequest);
+	}
+
+	@Override
+	public ServerSocket newServerSocket(Protocol protocol, String hostname, int port, ServerSocketHints hints) {
+		return null;
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSPreferences.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSPreferences.java
new file mode 100644
index 0000000..972c959
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSPreferences.java
@@ -0,0 +1,191 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import ios.foundation.NSMutableDictionary;
+import ios.foundation.NSNumber;
+import ios.foundation.NSString;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Preferences;
+
+public class IOSPreferences implements Preferences {
+	
+	NSMutableDictionary nsDictionary;
+	String filePath;
+
+	public IOSPreferences (NSMutableDictionary nsDictionary, String filePath) {
+		this.nsDictionary = nsDictionary;
+		this.filePath = filePath;
+	}
+
+	@Override
+	public Preferences putBoolean (String key, boolean val) {
+		nsDictionary.put(convertKey(key), NSNumber.numberWithBool(val));
+		return this;
+	}
+
+	@Override
+	public Preferences putInteger (String key, int val) {
+		nsDictionary.put(convertKey(key), NSNumber.numberWithInt(val));
+		return this;
+	}
+
+	@Override
+	public Preferences putLong (String key, long val) {
+		nsDictionary.put(convertKey(key), NSNumber.numberWithLongLong(val));
+		return this;
+	}
+
+	@Override
+	public Preferences putFloat (String key, float val) {
+		nsDictionary.put(convertKey(key), NSNumber.numberWithFloat(val));
+		return this;
+	}
+
+	@Override
+	public Preferences putString (String key, String val) {
+		nsDictionary.put(convertKey(key), NSString.alloc().initWithString(val));
+		return this;
+	}
+
+	@Override
+	public Preferences put (Map<String, ?> vals) {
+		Set<String> keySet = vals.keySet();
+		for (String key : keySet) {
+			Object value = vals.get(key);
+			if (value instanceof String) {
+				putString(key, (String)value);
+			} else if (value instanceof Boolean) {
+				putBoolean(key, (Boolean)value);
+			} else if (value instanceof Integer) {
+				putInteger(key, (Integer)value);
+			} else if (value instanceof Long) {
+				putLong(key, (Long)value);
+			} else if (value instanceof Float) {
+				putFloat(key, (Float)value);
+			}
+		}
+		return this;
+	}
+
+	@Override
+	public boolean getBoolean (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return false;
+		return value.boolValue();
+	}
+
+	@Override
+	public int getInteger (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0;
+		return value.intValue();
+	}
+
+	@Override
+	public long getLong (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0L;
+		return value.longValue();
+	}
+
+	@Override
+	public float getFloat (String key) {
+		NSNumber value = (NSNumber)nsDictionary.get(convertKey(key));
+		if (value == null) return 0f;
+		return value.floatValue();
+	}
+
+	@Override
+	public String getString (String key) {
+		NSString value = (NSString)nsDictionary.get(convertKey(key));
+		if (value == null) return "";
+		return value.toString();
+	}
+
+	@Override
+	public boolean getBoolean (String key, boolean defValue) {
+		if (!contains(key)) return defValue;
+		return getBoolean(key);
+	}
+
+	@Override
+	public int getInteger (String key, int defValue) {
+		if (!contains(key)) return defValue;
+		return getInteger(key);
+	}
+
+	@Override
+	public long getLong (String key, long defValue) {
+		if (!contains(key)) return defValue;
+		return getLong(key);
+	}
+
+	@Override
+	public float getFloat (String key, float defValue) {
+		if (!contains(key)) return defValue;
+		return getFloat(key);
+	}
+
+	@Override
+	public String getString (String key, String defValue) {
+		if (!contains(key)) return defValue;
+		return getString(key);
+	}
+
+	@Override
+	public Map<String, ?> get () {
+		 Map<String, Object> map = new HashMap<String, Object>();
+		 for (Object key : nsDictionary.keySet()) {
+			 Object value = nsDictionary.get(key);
+			 map.put(key.toString(), value.toString());
+		 }
+		 return map;
+	}
+
+	@Override
+	public boolean contains (String key) {
+		return nsDictionary.containsKey(convertKey(key));
+	}
+
+	@Override
+	public void clear () {
+		nsDictionary.clear();
+	}
+
+	@Override
+	public void remove (String key) {
+		nsDictionary.remove(convertKey(key));
+	}
+
+	private NSString convertKey (String key) {
+		return NSString.alloc().initWithString(key);
+	}
+
+	@Override
+	public void flush () {
+		boolean fileWritten = nsDictionary.writeToFileAtomically(filePath, false);
+		if (fileWritten)
+			Gdx.app.debug("IOSPreferences", "NSDictionary file written");
+		else
+			Gdx.app.debug("IOSPreferences", "Failed to write NSDictionary to file " + filePath);
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSServerSocket.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSServerSocket.java
new file mode 100644
index 0000000..e2ef0ef
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSServerSocket.java
@@ -0,0 +1,91 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import java.net.InetSocketAddress;
+
+import com.badlogic.gdx.Net.Protocol;
+import com.badlogic.gdx.net.ServerSocket;
+import com.badlogic.gdx.net.ServerSocketHints;
+import com.badlogic.gdx.net.Socket;
+import com.badlogic.gdx.net.SocketHints;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class IOSServerSocket implements ServerSocket {
+
+	private Protocol protocol;
+	
+	private java.net.ServerSocket server;
+	
+	public IOSServerSocket(Protocol protocol, int port, ServerSocketHints hints) {
+		this.protocol = protocol;
+		
+		// create the server socket
+		try {
+			// initialize
+			server = new java.net.ServerSocket();
+			if (hints != null) {
+				server.setPerformancePreferences(hints.performancePrefConnectionTime, 
+															hints.performancePrefLatency, 
+															hints.performancePrefBandwidth);
+				server.setReuseAddress(hints.reuseAddress);
+				server.setSoTimeout(hints.acceptTimeout);
+				server.setReceiveBufferSize(hints.receiveBufferSize);
+			}
+			
+			// and bind the server...
+			InetSocketAddress address = new InetSocketAddress(port);
+			if (hints != null) {
+				server.bind(address, hints.backlog);
+			}
+			else {
+				server.bind(address);
+			}
+		}
+		catch (Exception e) {
+			throw new GdxRuntimeException("Cannot create a server socket at port " + port + ".", e);
+		}
+	}
+
+	@Override
+	public Protocol getProtocol () {
+		return protocol;
+	}
+
+	@Override
+	public Socket accept(SocketHints hints) {
+		try {
+			return new IOSSocket(server.accept(), hints);
+		}
+		catch (Exception e) {
+			throw new GdxRuntimeException("Error accepting socket.", e);
+		}
+	}
+
+	@Override
+	public void dispose() {
+		if (server != null) {
+			try {
+				server.close();
+				server = null;
+			}
+			catch (Exception e) {
+				throw new GdxRuntimeException("Error closing server.", e);
+			}
+		}
+	}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSocket.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSocket.java
new file mode 100644
index 0000000..1896e3e
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSocket.java
@@ -0,0 +1,124 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.InetSocketAddress;
+
+import com.badlogic.gdx.Net.Protocol;
+import com.badlogic.gdx.net.Socket;
+import com.badlogic.gdx.net.SocketHints;
+import com.badlogic.gdx.utils.GdxRuntimeException;
+
+public class IOSSocket implements Socket {
+
+	private java.net.Socket socket;
+	
+	public IOSSocket(Protocol protocol, String host, int port, SocketHints hints) {
+		try {
+			// create the socket
+			socket = new java.net.Socket();
+			applyHints(hints);  // better to call BEFORE socket is connected!
+			
+			// and connect...
+			InetSocketAddress address = new InetSocketAddress(host, port);
+			if (hints != null) {
+				socket.connect(address, hints.connectTimeout);
+			}
+			else {
+				socket.connect(address);
+			}
+		}
+		catch (Exception e) {
+			throw new GdxRuntimeException("Error making a socket connection to " + host + ":" + port, e);
+		}
+	}
+	
+	public IOSSocket(java.net.Socket socket, SocketHints hints) {
+		this.socket = socket;
+		applyHints(hints);
+	}
+	
+	private void applyHints(SocketHints hints) {
+		if (hints != null) {
+			try {	
+				socket.setPerformancePreferences(hints.performancePrefConnectionTime, 
+					 										hints.performancePrefLatency, 
+					 										hints.performancePrefBandwidth);
+				socket.setTrafficClass(hints.trafficClass);
+				socket.setTcpNoDelay(hints.tcpNoDelay);
+				socket.setKeepAlive(hints.keepAlive);
+				socket.setSendBufferSize(hints.sendBufferSize);
+				socket.setReceiveBufferSize(hints.receiveBufferSize);
+				socket.setSoLinger(hints.linger, hints.lingerDuration);
+			}
+			catch (Exception e) {
+				throw new GdxRuntimeException("Error setting socket hints." , e);
+			}
+		}
+	}
+	
+	@Override
+	public boolean isConnected () {
+		if (socket != null) {
+			return socket.isConnected();
+		}
+		else {
+			return false;
+		}
+	}
+
+	@Override
+	public InputStream getInputStream () {
+		try {
+			return socket.getInputStream();
+		}
+		catch (Exception e) {
+			throw new GdxRuntimeException("Error getting input stream from socket.", e);
+		}
+	}
+
+	@Override
+	public OutputStream getOutputStream () {
+		try {
+			return socket.getOutputStream();
+		}
+		catch (Exception e) {
+			throw new GdxRuntimeException("Error getting output stream from socket.", e);
+		}
+	}
+	
+	@Override
+	public String getRemoteAddress () {
+		return socket.getRemoteSocketAddress().toString();
+	}
+
+	@Override
+	public void dispose() {
+		if (socket != null) {
+			try {
+				socket.close();
+				socket = null;
+			}
+			catch (Exception e) {
+				throw new GdxRuntimeException("Error closing socket.", e);
+			}
+		}
+	}
+
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSound.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSound.java
new file mode 100644
index 0000000..2197215
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSSound.java
@@ -0,0 +1,132 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.objectal.ALBuffer;
+import ios.objectal.ALSource;
+import ios.objectal.OALSimpleAudio;
+
+import com.badlogic.gdx.audio.Sound;
+import com.badlogic.gdx.files.FileHandle;
+
+public class IOSSound implements Sound {
+
+	private ALSource soundSource;
+	private ALBuffer soundBuffer;
+	private String soundPath;
+	
+	public IOSSound (FileHandle filePath) {
+		soundPath = filePath.file().getPath().replace('\\', '/');
+		soundBuffer = OALSimpleAudio.sharedInstance().preloadEffect(soundPath);
+	}
+
+	@Override
+	public long play () {
+		return play(1, 1, 1, false);
+	}
+
+	@Override
+	public long play (float volume) {
+		return play(volume, 1, 1, false);
+	}
+
+	@Override
+	public long play (float volume, float pitch, float pan) {
+		return play(volume, pitch, pan, false);
+	}
+
+	public long play (float volume, float pitch, float pan, boolean loop) {
+		soundSource = OALSimpleAudio.sharedInstance().playEffectVolumePitchPanLoop(soundPath, volume, pitch, pan, loop);
+		return 0;
+	}
+
+	@Override
+	public long loop () {
+		return play(1, 1, 1, true);
+	}
+
+	@Override
+	public long loop (float volume) {
+		return play(volume, 1, 1, true);
+	}
+
+	@Override
+	public long loop (float volume, float pitch, float pan) {
+		return play(volume, pitch, pan, true);
+	}
+
+	@Override
+	public void stop () {
+		if (soundSource != null) soundSource.stop();
+	}
+
+	@Override
+	public void dispose () {
+		OALSimpleAudio.sharedInstance().unloadEffect(soundPath);
+	}
+
+	@Override
+	public void stop (long soundId) {
+		// we should do something to give an id for each sound.
+		stop();
+	}
+
+	@Override
+	public void setLooping (long soundId, boolean looping) {
+		// TODO Auto-generated method stub
+	}
+
+	@Override
+	public void setPitch (long soundId, float pitch) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void setVolume (long soundId, float volume) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void setPan (long soundId, float pan, float volume) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void pause () {
+		if (soundSource != null) soundSource.setPaused(true);
+	}
+
+	@Override
+	public void resume () {
+		if (soundSource != null) soundSource.setPaused(false);
+	}
+
+	@Override
+	public void pause (long soundId) {
+		// we should do something to give an id for each sound.
+		pause();
+	}
+
+	@Override
+	public void resume (long soundId) {
+		// we should do something to give an id for each sound.
+		resume();
+	}
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSUIViewController.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSUIViewController.java
new file mode 100644
index 0000000..deeea38
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/intel/moe/IOSUIViewController.java
@@ -0,0 +1,77 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.intel.moe;
+
+import ios.coregraphics.struct.CGSize;
+import ios.glkit.GLKViewController;
+import ios.uikit.enums.UIInterfaceOrientation;
+
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.NatJ;
+
+public class IOSUIViewController extends GLKViewController {
+	
+	IOSApplication app;
+	IOSGraphics graphics;
+	boolean created = false;
+
+	static {
+		NatJ.register();
+	}
+	
+	@Selector("init")
+	public native IOSUIViewController init();
+	
+	void iOSUIViewController(IOSApplication app, IOSGraphics graphics) {
+		this.app = app;
+		this.graphics = graphics;
+	}
+
+	@Selector("didRotateFromInterfaceOrientation:")
+	public void didRotateFromInterfaceOrientation(
+			int fromInterfaceOrientation) {
+		CGSize bounds = app.getBounds(this);
+		graphics.width = (int) bounds.width();
+		graphics.height = (int) bounds.height();
+		graphics.makeCurrent();
+		app.listener.resize(graphics.width, graphics.height);
+	}
+
+	@Selector("shouldAutorotateToInterfaceOrientation:")
+	public boolean shouldAutorotateToInterfaceOrientation(
+			int orientation) {
+		switch (orientation) {
+		case (int) UIInterfaceOrientation.LandscapeLeft:
+		case (int) UIInterfaceOrientation.LandscapeRight:
+			return app.config.orientationLandscape;
+		default:
+			return app.config.orientationPortrait;
+		}
+	}
+
+	@Generated("NatJ")
+	@Selector("alloc")
+	public static native IOSUIViewController alloc();
+
+	@Generated("NatJ")
+	protected IOSUIViewController(Pointer peer) {
+		super(peer);
+	}
+
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
new file mode 100644
index 0000000..daf6e14
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/backends/iosrobovm/IOSGLES20.java
@@ -0,0 +1,369 @@
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.backends.iosrobovm;
+
+import java.nio.Buffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+import com.badlogic.gdx.graphics.GL20;
+
+public class IOSGLES20 implements GL20
+{	
+	public IOSGLES20() {
+		init();
+	}
+	
+	/** last viewport set, needed because GLKView resets the viewport on each call to render... amazing **/
+	public static int x, y, width, height;
+	
+	private static native void init( );	
+	
+	public native void glActiveTexture ( int texture );
+
+	public native void glAttachShader ( int program, int shader );
+
+	public native void glBindAttribLocation ( int program, int index, String name );
+
+	public native void glBindBuffer ( int target, int buffer );
+
+	public native void glBindFramebuffer ( int target, int framebuffer );
+
+	public native void glBindRenderbuffer ( int target, int renderbuffer );
+
+	public native void glBindTexture ( int target, int texture );
+
+	public native void glBlendColor ( float red, float green, float blue, float alpha );
+
+	public native void glBlendEquation (  int mode  );
+
+	public native void glBlendEquationSeparate ( int modeRGB, int modeAlpha );
+
+	public native void glBlendFunc ( int sfactor, int dfactor );
+
+	public native void glBlendFuncSeparate ( int srcRGB, int dstRGB, int srcAlpha, int dstAlpha );
+
+	public native void glBufferData ( int target, int size, Buffer data, int usage );
+
+	public native void glBufferSubData ( int target, int offset, int size, Buffer data );
+
+	public native int glCheckFramebufferStatus ( int target );
+
+	public native void glClear ( int mask );
+
+	public native void glClearColor ( float red, float green, float blue, float alpha );
+
+	public native void glClearDepthf ( float depth );
+
+	public native void glClearStencil ( int s );
+
+	public native void glColorMask ( boolean red, boolean green, boolean blue, boolean alpha );
+
+	public native void glCompileShader ( int shader );
+
+	public native void glCompressedTexImage2D ( int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer data );
+
+	public native void glCompressedTexSubImage2D ( int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer data );
+
+	public native void glCopyTexImage2D ( int target, int level, int internalformat, int x, int y, int width, int height, int border );
+
+	public native void glCopyTexSubImage2D ( int target, int level, int xoffset, int yoffset, int x, int y, int width, int height );
+
+	public native int glCreateProgram (  );
+
+	public native int glCreateShader ( int type );
+
+	public native void glCullFace ( int mode );
+
+	public native void glDeleteBuffers ( int n, IntBuffer buffers );
+	
+	public native void glDeleteBuffer(int buffer);
+
+	public native void glDeleteFramebuffers ( int n, IntBuffer framebuffers );
+	
+	public native void glDeleteFramebuffer(int framebuffer);
+
+	public native void glDeleteProgram ( int program );
+
+	public native void glDeleteRenderbuffers ( int n, IntBuffer renderbuffers );
+	
+	public native void glDeleteRenderbuffer(int renderbuffer);
+
+	public native void glDeleteShader ( int shader );
+
+	public native void glDeleteTextures ( int n, IntBuffer textures );
+	
+	public native void glDeleteTexture(int texture);
+
+	public native void glDepthFunc ( int func );
+
+	public native void glDepthMask ( boolean flag );
+
+	public native void glDepthRangef ( float zNear, float zFar );
+
+	public native void glDetachShader ( int program, int shader );
+
+	public native void glDisable ( int cap );
+
+	public native void glDisableVertexAttribArray ( int index );
+
+	public native void glDrawArrays ( int mode, int first, int count );
+
+	public native void glDrawElements ( int mode, int count, int type, Buffer indices );
+	
+	public native void glDrawElements ( int mode, int count, int type, int indices );
+
+	public native void glEnable ( int cap );
+
+	public native void glEnableVertexAttribArray ( int index );
+
+	public native void glFinish (  );
+
+	public native void glFlush (  );
+
+	public native void glFramebufferRenderbuffer ( int target, int attachment, int renderbuffertarget, int renderbuffer );
+
+	public native void glFramebufferTexture2D ( int target, int attachment, int textarget, int texture, int level );
+
+	public native void glFrontFace ( int mode );
+
+	public native void glGenBuffers ( int n, IntBuffer buffers );
+	
+	public native int glGenBuffer();
+
+	public native void glGenerateMipmap ( int target );
+
+	public native void glGenFramebuffers ( int n, IntBuffer framebuffers );
+	
+	public native int glGenFramebuffer();
+
+	public native void glGenRenderbuffers ( int n, IntBuffer renderbuffers );
+	
+	public native int glGenRenderbuffer();
+	
+	public native void glGenTextures ( int n, IntBuffer textures );
+	
+	public native int glGenTexture();
+
+	public native String glGetActiveAttrib ( int program, int index, IntBuffer size, Buffer type );
+
+	public native String glGetActiveUniform ( int program, int index, IntBuffer size, Buffer type );
+
+	public native void glGetAttachedShaders ( int program, int maxcount, Buffer count, IntBuffer shaders );
+
+	public native int glGetAttribLocation ( int program, String name );
+
+	public native void glGetBooleanv ( int pname, Buffer params );
+
+	public native void glGetBufferParameteriv ( int target, int pname, IntBuffer params );
+
+	public native int glGetError (  );
+
+	public native void glGetFloatv ( int pname, FloatBuffer params );
+
+	public native void glGetFramebufferAttachmentParameteriv ( int target, int attachment, int pname, IntBuffer params );
+
+	public native void glGetIntegerv ( int pname, IntBuffer params );
+
+	public native void glGetProgramiv ( int program, int pname, IntBuffer params );
+
+	public native String glGetProgramInfoLog ( int program );
+
+	public native void glGetRenderbufferParameteriv ( int target, int pname, IntBuffer params );
+
+	public native void glGetShaderiv ( int shader, int pname, IntBuffer params );
+
+	public native String glGetShaderInfoLog ( int shader );
+
+	public native void glGetShaderPrecisionFormat ( int shadertype, int precisiontype, IntBuffer range, IntBuffer precision );
+
+	public native void glGetShaderSource ( int shader, int bufsize, Buffer length, String source );
+
+	public native String glGetString ( int name );
+
+	public native void glGetTexParameterfv ( int target, int pname, FloatBuffer params );
+
+	public native void glGetTexParameteriv ( int target, int pname, IntBuffer params );
+
+	public native void glGetUniformfv ( int program, int location, FloatBuffer params );
+
+	public native void glGetUniformiv ( int program, int location, IntBuffer params );
+
+	public native int glGetUniformLocation ( int program, String name );
+
+	public native void glGetVertexAttribfv ( int index, int pname, FloatBuffer params );
+
+	public native void glGetVertexAttribiv ( int index, int pname, IntBuffer params );
+
+	public native void glGetVertexAttribPointerv ( int index, int pname, Buffer pointer );
+
+	public native void glHint ( int target, int mode );
+
+	public native boolean glIsBuffer ( int buffer );
+
+	public native boolean glIsEnabled ( int cap );
+
+	public native boolean glIsFramebuffer ( int framebuffer );
+
+	public native boolean glIsProgram ( int program );
+
+	public native boolean glIsRenderbuffer ( int renderbuffer );
+
+	public native boolean glIsShader ( int shader );
+
+	public native boolean glIsTexture ( int texture );
+
+	public native void glLineWidth ( float width );
+
+	public native void glLinkProgram ( int program );
+
+	public native void glPixelStorei ( int pname, int param );
+
+	public native void glPolygonOffset ( float factor, float units );
+
+	public native void glReadPixels ( int x, int y, int width, int height, int format, int type, Buffer pixels );
+
+	public native void glReleaseShaderCompiler (  );
+
+	public native void glRenderbufferStorage ( int target, int internalformat, int width, int height );
+
+	public native void glSampleCoverage ( float value, boolean invert );
+
+	public native void glScissor ( int x, int y, int width, int height );
+
+	public native void glShaderBinary ( int n, IntBuffer shaders, int binaryformat, Buffer binary, int length );
+
+	public native void glShaderSource ( int shader, String string );
+
+	public native void glStencilFunc ( int func, int ref, int mask );
+
+	public native void glStencilFuncSeparate ( int face, int func, int ref, int mask );
+
+	public native void glStencilMask ( int mask );
+
+	public native void glStencilMaskSeparate ( int face, int mask );
+
+	public native void glStencilOp ( int fail, int zfail, int zpass );
+
+	public native void glStencilOpSeparate ( int face, int fail, int zfail, int zpass );
+
+	public native void glTexImage2D ( int target, int level, int internalformat, int width, int height, int border, int format, int type, Buffer pixels );
+
+	public native void glTexParameterf ( int target, int pname, float param );
+
+	public native void glTexParameterfv ( int target, int pname, FloatBuffer params );
+
+	public native void glTexParameteri ( int target, int pname, int param );
+
+	public native void glTexParameteriv ( int target, int pname, IntBuffer params );
+
+	public native void glTexSubImage2D ( int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels );
+
+	public native void glUniform1f ( int location, float x );
+
+	public native void glUniform1fv ( int location, int count, FloatBuffer v );
+
+	public native void glUniform1fv(int location, int count, float[] v, int offset);
+	
+	public native void glUniform1i ( int location, int x );
+
+	public native void glUniform1iv ( int location, int count, IntBuffer v );
+	
+	public native void glUniform1iv(int location, int count, int[] v, int offset);
+
+	public native void glUniform2f ( int location, float x, float y );
+
+	public native void glUniform2fv ( int location, int count, FloatBuffer v );
+	
+	public native void glUniform2fv(int location, int count, float[] v, int offset);
+
+	public native void glUniform2i ( int location, int x, int y );
+
+	public native void glUniform2iv ( int location, int count, IntBuffer v );
+	
+	public native void glUniform2iv(int location, int count, int[] v, int offset);
+
+	public native void glUniform3f ( int location, float x, float y, float z );
+
+	public native void glUniform3fv ( int location, int count, FloatBuffer v );
+	
+	public native void glUniform3fv(int location, int count, float[] v, int offset);
+
+	public native void glUniform3i ( int location, int x, int y, int z );
+
+	public native void glUniform3iv ( int location, int count, IntBuffer v );
+	
+	public native void glUniform3iv(int location, int count, int[] v, int offset);
+	
+	public native void glUniform4f ( int location, float x, float y, float z, float w );
+
+	public native void glUniform4fv ( int location, int count, FloatBuffer v );
+	
+	public native void glUniform4fv(int location, int count, float[] v, int offset);
+
+	public native void glUniform4i ( int location, int x, int y, int z, int w );
+
+	public native void glUniform4iv ( int location, int count, IntBuffer v );
+	
+	public native void glUniform4iv(int location, int count, int[] v, int offset);
+
+	public native void glUniformMatrix2fv ( int location, int count, boolean transpose, FloatBuffer value );
+	
+	public native void glUniformMatrix2fv(int location, int count, boolean transpose, float[] value, int offset);
+
+	public native void glUniformMatrix3fv ( int location, int count, boolean transpose, FloatBuffer value );
+	
+	public native void glUniformMatrix3fv(int location, int count, boolean transpose, float[] value, int offset);
+
+	public native void glUniformMatrix4fv ( int location, int count, boolean transpose, FloatBuffer value );
+	
+	public native void glUniformMatrix4fv(int location, int count, boolean transpose, float[] value, int offset);
+
+	public native void glUseProgram ( int program );
+
+	public native void glValidateProgram ( int program );
+
+	public native void glVertexAttrib1f ( int indx, float x );
+
+	public native void glVertexAttrib1fv ( int indx, FloatBuffer values );
+
+	public native void glVertexAttrib2f ( int indx, float x, float y );
+
+	public native void glVertexAttrib2fv ( int indx, FloatBuffer values );
+
+	public native void glVertexAttrib3f ( int indx, float x, float y, float z );
+
+	public native void glVertexAttrib3fv ( int indx, FloatBuffer values );
+
+	public native void glVertexAttrib4f ( int indx, float x, float y, float z, float w );
+
+	public native void glVertexAttrib4fv ( int indx, FloatBuffer values );
+
+	public native void glVertexAttribPointer ( int indx, int size, int type, boolean normalized, int stride, Buffer ptr );
+	
+	public native void glVertexAttribPointer ( int indx, int size, int type, boolean normalized, int stride, int ptr );
+
+	public void glViewport(int x, int y, int width, int height) {
+		IOSGLES20.x = x;
+		IOSGLES20.y = y;
+		IOSGLES20.width = width;
+		IOSGLES20.height = height;
+		glViewportJni(x, y, width, height);
+	}
+	
+	public native void glViewportJni ( int x, int y, int width, int height );
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl
new file mode 100644
index 0000000..7d86dcf
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.fragment.glsl
@@ -0,0 +1,181 @@
+#ifdef GL_ES 
+#define LOWP lowp
+#define MED mediump
+#define HIGH highp
+precision mediump float;
+#else
+#define MED
+#define LOWP
+#define HIGH
+#endif
+
+#if defined(specularTextureFlag) || defined(specularColorFlag)
+#define specularFlag
+#endif
+
+#ifdef normalFlag
+varying vec3 v_normal;
+#endif //normalFlag
+
+#if defined(colorFlag)
+varying vec4 v_color;
+#endif
+
+#ifdef blendedFlag
+varying float v_opacity;
+#ifdef alphaTestFlag
+varying float v_alphaTest;
+#endif //alphaTestFlag
+#endif //blendedFlag
+
+#if defined(diffuseTextureFlag) || defined(specularTextureFlag)
+#define textureFlag
+varying MED vec2 v_texCoords0;
+#endif
+
+#ifdef diffuseColorFlag
+uniform vec4 u_diffuseColor;
+#endif
+
+#ifdef diffuseTextureFlag
+uniform sampler2D u_diffuseTexture;
+#endif
+
+#ifdef specularColorFlag
+uniform vec4 u_specularColor;
+#endif
+
+#ifdef specularTextureFlag
+uniform sampler2D u_specularTexture;
+#endif
+
+#ifdef normalTextureFlag
+uniform sampler2D u_normalTexture;
+#endif
+
+#ifdef lightingFlag
+varying vec3 v_lightDiffuse;
+
+#if	defined(ambientLightFlag) || defined(ambientCubemapFlag) || defined(sphericalHarmonicsFlag)
+#define ambientFlag
+#endif //ambientFlag
+
+#ifdef specularFlag
+varying vec3 v_lightSpecular;
+#endif //specularFlag
+
+#ifdef shadowMapFlag
+uniform sampler2D u_shadowTexture;
+uniform float u_shadowPCFOffset;
+varying vec3 v_shadowMapUv;
+#define separateAmbientFlag
+
+float getShadowness(vec2 offset)
+{
+    const vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0);
+    return step(v_shadowMapUv.z, dot(texture2D(u_shadowTexture, v_shadowMapUv.xy + offset), bitShifts));//+(1.0/255.0));	
+}
+
+float getShadow() 
+{
+	return (//getShadowness(vec2(0,0)) + 
+			getShadowness(vec2(u_shadowPCFOffset, u_shadowPCFOffset)) +
+			getShadowness(vec2(-u_shadowPCFOffset, u_shadowPCFOffset)) +
+			getShadowness(vec2(u_shadowPCFOffset, -u_shadowPCFOffset)) +
+			getShadowness(vec2(-u_shadowPCFOffset, -u_shadowPCFOffset))) * 0.25;
+}
+#endif //shadowMapFlag
+
+#if defined(ambientFlag) && defined(separateAmbientFlag)
+varying vec3 v_ambientLight;
+#endif //separateAmbientFlag
+
+#endif //lightingFlag
+
+#ifdef fogFlag
+uniform vec4 u_fogColor;
+varying float v_fog;
+#endif // fogFlag
+
+void main() {
+	#if defined(normalFlag) 
+		vec3 normal = v_normal;
+	#endif // normalFlag
+		
+	#if defined(diffuseTextureFlag) && defined(diffuseColorFlag) && defined(colorFlag)
+		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * u_diffuseColor * v_color;
+	#elif defined(diffuseTextureFlag) && defined(diffuseColorFlag)
+		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * u_diffuseColor;
+	#elif defined(diffuseTextureFlag) && defined(colorFlag)
+		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0) * v_color;
+	#elif defined(diffuseTextureFlag)
+		vec4 diffuse = texture2D(u_diffuseTexture, v_texCoords0);
+	#elif defined(diffuseColorFlag) && defined(colorFlag)
+		vec4 diffuse = u_diffuseColor * v_color;
+	#elif defined(diffuseColorFlag)
+		vec4 diffuse = u_diffuseColor;
+	#elif defined(colorFlag)
+		vec4 diffuse = v_color;
+	#else
+		vec4 diffuse = vec4(1.0);
+	#endif
+
+	#if (!defined(lightingFlag))  
+		gl_FragColor.rgb = diffuse.rgb;
+	#elif (!defined(specularFlag))
+		#if defined(ambientFlag) && defined(separateAmbientFlag)
+			#ifdef shadowMapFlag
+				gl_FragColor.rgb = (diffuse.rgb * (v_ambientLight + getShadow() * v_lightDiffuse));
+				//gl_FragColor.rgb = texture2D(u_shadowTexture, v_shadowMapUv.xy);
+			#else
+				gl_FragColor.rgb = (diffuse.rgb * (v_ambientLight + v_lightDiffuse));
+			#endif //shadowMapFlag
+		#else
+			#ifdef shadowMapFlag
+				gl_FragColor.rgb = getShadow() * (diffuse.rgb * v_lightDiffuse);
+			#else
+				gl_FragColor.rgb = (diffuse.rgb * v_lightDiffuse);
+			#endif //shadowMapFlag
+		#endif
+	#else
+		#if defined(specularTextureFlag) && defined(specularColorFlag)
+			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * u_specularColor.rgb * v_lightSpecular;
+		#elif defined(specularTextureFlag)
+			vec3 specular = texture2D(u_specularTexture, v_texCoords0).rgb * v_lightSpecular;
+		#elif defined(specularColorFlag)
+			vec3 specular = u_specularColor.rgb * v_lightSpecular;
+		#else
+			vec3 specular = v_lightSpecular;
+		#endif
+			
+		#if defined(ambientFlag) && defined(separateAmbientFlag)
+			#ifdef shadowMapFlag
+			gl_FragColor.rgb = (diffuse.rgb * (getShadow() * v_lightDiffuse + v_ambientLight)) + specular;
+				//gl_FragColor.rgb = texture2D(u_shadowTexture, v_shadowMapUv.xy);
+			#else
+				gl_FragColor.rgb = (diffuse.rgb * (v_lightDiffuse + v_ambientLight)) + specular;
+			#endif //shadowMapFlag
+		#else
+			#ifdef shadowMapFlag
+				gl_FragColor.rgb = getShadow() * ((diffuse.rgb * v_lightDiffuse) + specular);
+			#else
+				gl_FragColor.rgb = (diffuse.rgb * v_lightDiffuse) + specular;
+			#endif //shadowMapFlag
+		#endif
+	#endif //lightingFlag
+
+	#ifdef fogFlag
+		gl_FragColor.rgb = mix(gl_FragColor.rgb, u_fogColor.rgb, v_fog);
+	#endif // end fogFlag
+
+	#ifdef blendedFlag
+		gl_FragColor.a = diffuse.a * v_opacity;
+		#ifdef alphaTestFlag
+			if (gl_FragColor.a <= v_alphaTest)
+				discard;
+		#endif
+	#else
+		gl_FragColor.a = 1.0;
+	#endif
+
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl
new file mode 100644
index 0000000..c14953d
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/default.vertex.glsl
@@ -0,0 +1,323 @@
+#if defined(diffuseTextureFlag) || defined(specularTextureFlag)
+#define textureFlag
+#endif
+
+#if defined(specularTextureFlag) || defined(specularColorFlag)
+#define specularFlag
+#endif
+
+#if defined(specularFlag) || defined(fogFlag)
+#define cameraPositionFlag
+#endif
+
+attribute vec3 a_position;
+uniform mat4 u_projViewTrans;
+
+#if defined(colorFlag)
+varying vec4 v_color;
+attribute vec4 a_color;
+#endif // colorFlag
+
+#ifdef normalFlag
+attribute vec3 a_normal;
+uniform mat3 u_normalMatrix;
+varying vec3 v_normal;
+#endif // normalFlag
+
+#ifdef textureFlag
+attribute vec2 a_texCoord0;
+varying vec2 v_texCoords0;
+#endif // textureFlag
+
+#ifdef boneWeight0Flag
+#define boneWeightsFlag
+attribute vec2 a_boneWeight0;
+#endif //boneWeight0Flag
+
+#ifdef boneWeight1Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight1;
+#endif //boneWeight1Flag
+
+#ifdef boneWeight2Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight2;
+#endif //boneWeight2Flag
+
+#ifdef boneWeight3Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight3;
+#endif //boneWeight3Flag
+
+#ifdef boneWeight4Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight4;
+#endif //boneWeight4Flag
+
+#ifdef boneWeight5Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight5;
+#endif //boneWeight5Flag
+
+#ifdef boneWeight6Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight6;
+#endif //boneWeight6Flag
+
+#ifdef boneWeight7Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight7;
+#endif //boneWeight7Flag
+
+#if defined(numBones) && defined(boneWeightsFlag)
+#if (numBones > 0) 
+#define skinningFlag
+#endif
+#endif
+
+uniform mat4 u_worldTrans;
+
+#if defined(numBones)
+#if numBones > 0
+uniform mat4 u_bones[numBones];
+#endif //numBones
+#endif
+
+#ifdef shininessFlag
+uniform float u_shininess;
+#else
+const float u_shininess = 20.0;
+#endif // shininessFlag
+
+#ifdef blendedFlag
+uniform float u_opacity;
+varying float v_opacity;
+
+#ifdef alphaTestFlag
+uniform float u_alphaTest;
+varying float v_alphaTest;
+#endif //alphaTestFlag
+#endif // blendedFlag
+
+#ifdef lightingFlag
+varying vec3 v_lightDiffuse;
+
+#ifdef ambientLightFlag
+uniform vec3 u_ambientLight;
+#endif // ambientLightFlag
+
+#ifdef ambientCubemapFlag
+uniform vec3 u_ambientCubemap[6];
+#endif // ambientCubemapFlag 
+
+#ifdef sphericalHarmonicsFlag
+uniform vec3 u_sphericalHarmonics[9];
+#endif //sphericalHarmonicsFlag
+
+#ifdef specularFlag
+varying vec3 v_lightSpecular;
+#endif // specularFlag
+
+#ifdef cameraPositionFlag
+uniform vec4 u_cameraPosition;
+#endif // cameraPositionFlag
+
+#ifdef fogFlag
+varying float v_fog;
+#endif // fogFlag
+
+
+#if defined(numDirectionalLights) && (numDirectionalLights > 0)
+struct DirectionalLight
+{
+	vec3 color;
+	vec3 direction;
+};
+uniform DirectionalLight u_dirLights[numDirectionalLights];
+#endif // numDirectionalLights
+
+#if defined(numPointLights) && (numPointLights > 0)
+struct PointLight
+{
+	vec3 color;
+	vec3 position;
+};
+uniform PointLight u_pointLights[numPointLights];
+#endif // numPointLights
+
+#if	defined(ambientLightFlag) || defined(ambientCubemapFlag) || defined(sphericalHarmonicsFlag)
+#define ambientFlag
+#endif //ambientFlag
+
+#ifdef shadowMapFlag
+uniform mat4 u_shadowMapProjViewTrans;
+varying vec3 v_shadowMapUv;
+#define separateAmbientFlag
+#endif //shadowMapFlag
+
+#if defined(ambientFlag) && defined(separateAmbientFlag)
+varying vec3 v_ambientLight;
+#endif //separateAmbientFlag
+
+#endif // lightingFlag
+
+void main() {
+	#ifdef textureFlag
+		v_texCoords0 = a_texCoord0;
+	#endif // textureFlag
+	
+	#if defined(colorFlag)
+		v_color = a_color;
+	#endif // colorFlag
+		
+	#ifdef blendedFlag
+		v_opacity = u_opacity;
+		#ifdef alphaTestFlag
+			v_alphaTest = u_alphaTest;
+		#endif //alphaTestFlag
+	#endif // blendedFlag
+	
+	#ifdef skinningFlag
+		mat4 skinning = mat4(0.0);
+		#ifdef boneWeight0Flag
+			skinning += (a_boneWeight0.y) * u_bones[int(a_boneWeight0.x)];
+		#endif //boneWeight0Flag
+		#ifdef boneWeight1Flag				
+			skinning += (a_boneWeight1.y) * u_bones[int(a_boneWeight1.x)];
+		#endif //boneWeight1Flag
+		#ifdef boneWeight2Flag		
+			skinning += (a_boneWeight2.y) * u_bones[int(a_boneWeight2.x)];
+		#endif //boneWeight2Flag
+		#ifdef boneWeight3Flag
+			skinning += (a_boneWeight3.y) * u_bones[int(a_boneWeight3.x)];
+		#endif //boneWeight3Flag
+		#ifdef boneWeight4Flag
+			skinning += (a_boneWeight4.y) * u_bones[int(a_boneWeight4.x)];
+		#endif //boneWeight4Flag
+		#ifdef boneWeight5Flag
+			skinning += (a_boneWeight5.y) * u_bones[int(a_boneWeight5.x)];
+		#endif //boneWeight5Flag
+		#ifdef boneWeight6Flag
+			skinning += (a_boneWeight6.y) * u_bones[int(a_boneWeight6.x)];
+		#endif //boneWeight6Flag
+		#ifdef boneWeight7Flag
+			skinning += (a_boneWeight7.y) * u_bones[int(a_boneWeight7.x)];
+		#endif //boneWeight7Flag
+	#endif //skinningFlag
+
+	#ifdef skinningFlag
+		vec4 pos = u_worldTrans * skinning * vec4(a_position, 1.0);
+	#else
+		vec4 pos = u_worldTrans * vec4(a_position, 1.0);
+	#endif
+		
+	gl_Position = u_projViewTrans * pos;
+		
+	#ifdef shadowMapFlag
+		vec4 spos = u_shadowMapProjViewTrans * pos;
+		v_shadowMapUv.xy = (spos.xy / spos.w) * 0.5 + 0.5;
+		v_shadowMapUv.z = min(spos.z * 0.5 + 0.5, 0.998);
+	#endif //shadowMapFlag
+	
+	#if defined(normalFlag)
+		#if defined(skinningFlag)
+			vec3 normal = normalize((u_worldTrans * skinning * vec4(a_normal, 0.0)).xyz);
+		#else
+			vec3 normal = normalize(u_normalMatrix * a_normal);
+		#endif
+		v_normal = normal;
+	#endif // normalFlag
+
+    #ifdef fogFlag
+        vec3 flen = u_cameraPosition.xyz - pos.xyz;
+        float fog = dot(flen, flen) * u_cameraPosition.w;
+        v_fog = min(fog, 1.0);
+    #endif
+
+	#ifdef lightingFlag
+		#if	defined(ambientLightFlag)
+        	vec3 ambientLight = u_ambientLight;
+		#elif defined(ambientFlag)
+        	vec3 ambientLight = vec3(0.0);
+		#endif
+			
+		#ifdef ambientCubemapFlag 		
+			vec3 squaredNormal = normal * normal;
+			vec3 isPositive  = step(0.0, normal);
+			ambientLight += squaredNormal.x * mix(u_ambientCubemap[0], u_ambientCubemap[1], isPositive.x) +
+					squaredNormal.y * mix(u_ambientCubemap[2], u_ambientCubemap[3], isPositive.y) +
+					squaredNormal.z * mix(u_ambientCubemap[4], u_ambientCubemap[5], isPositive.z);
+		#endif // ambientCubemapFlag
+
+		#ifdef sphericalHarmonicsFlag
+			ambientLight += u_sphericalHarmonics[0];
+			ambientLight += u_sphericalHarmonics[1] * normal.x;
+			ambientLight += u_sphericalHarmonics[2] * normal.y;
+			ambientLight += u_sphericalHarmonics[3] * normal.z;
+			ambientLight += u_sphericalHarmonics[4] * (normal.x * normal.z);
+			ambientLight += u_sphericalHarmonics[5] * (normal.z * normal.y);
+			ambientLight += u_sphericalHarmonics[6] * (normal.y * normal.x);
+			ambientLight += u_sphericalHarmonics[7] * (3.0 * normal.z * normal.z - 1.0);
+			ambientLight += u_sphericalHarmonics[8] * (normal.x * normal.x - normal.y * normal.y);			
+		#endif // sphericalHarmonicsFlag
+
+		#ifdef ambientFlag
+			#ifdef separateAmbientFlag
+				v_ambientLight = ambientLight;
+				v_lightDiffuse = vec3(0.0);
+			#else
+				v_lightDiffuse = ambientLight;
+			#endif //separateAmbientFlag
+		#else
+	        v_lightDiffuse = vec3(0.0);
+		#endif //ambientFlag
+
+			
+		#ifdef specularFlag
+			v_lightSpecular = vec3(0.0);
+			vec3 viewVec = normalize(u_cameraPosition.xyz - pos.xyz);
+		#endif // specularFlag
+			
+		#if defined(numDirectionalLights) && (numDirectionalLights > 0) && defined(normalFlag)
+			for (int i = 0; i < numDirectionalLights; i++) {
+				vec3 lightDir = -u_dirLights[i].direction;
+				float NdotL = clamp(dot(normal, lightDir), 0.0, 1.0);
+				vec3 value = u_dirLights[i].color * NdotL;
+				v_lightDiffuse += value;
+				#ifdef specularFlag
+					float halfDotView = max(0.0, dot(normal, normalize(lightDir + viewVec)));
+					v_lightSpecular += value * pow(halfDotView, u_shininess);
+				#endif // specularFlag
+			}
+		#endif // numDirectionalLights
+
+		#if defined(numPointLights) && (numPointLights > 0) && defined(normalFlag)
+			for (int i = 0; i < numPointLights; i++) {
+				vec3 lightDir = u_pointLights[i].position - pos.xyz;
+				float dist2 = dot(lightDir, lightDir);
+				lightDir *= inversesqrt(dist2);
+				float NdotL = clamp(dot(normal, lightDir), 0.0, 1.0);
+				vec3 value = u_pointLights[i].color * (NdotL / (1.0 + dist2));
+				v_lightDiffuse += value;
+				#ifdef specularFlag
+					float halfDotView = max(0.0, dot(normal, normalize(lightDir + viewVec)));
+					v_lightSpecular += value * pow(halfDotView, u_shininess);
+				#endif // specularFlag
+			}
+		#endif // numPointLights
+	#endif // lightingFlag
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.fragment.glsl b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.fragment.glsl
new file mode 100644
index 0000000..b016e99
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.fragment.glsl
@@ -0,0 +1,23 @@
+#ifdef GL_ES 
+#define LOWP lowp
+#define MED mediump
+#define HIGH highp
+precision mediump float;
+#else
+#define MED
+#define LOWP
+#define HIGH
+#endif
+
+#ifdef PackedDepthFlag
+varying HIGH float v_depth;
+#endif //PackedDepthFlag
+
+void main() {
+	#ifdef PackedDepthFlag
+		HIGH float depth = v_depth;
+		const HIGH vec4 bias = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);
+		HIGH vec4 color = vec4(depth, fract(depth * 255.0), fract(depth * 65025.0), fract(depth * 160581375.0));
+		gl_FragColor = color - (color.yzww * bias);
+	#endif //PackedDepthFlag
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.vertex.glsl b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.vertex.glsl
new file mode 100644
index 0000000..a91858c
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/graphics/g3d/shaders/depth.vertex.glsl
@@ -0,0 +1,114 @@
+attribute vec3 a_position;
+uniform mat4 u_projViewWorldTrans;
+
+#ifdef boneWeight0Flag
+#define boneWeightsFlag
+attribute vec2 a_boneWeight0;
+#endif //boneWeight0Flag
+
+#ifdef boneWeight1Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight1;
+#endif //boneWeight1Flag
+
+#ifdef boneWeight2Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight2;
+#endif //boneWeight2Flag
+
+#ifdef boneWeight3Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight3;
+#endif //boneWeight3Flag
+
+#ifdef boneWeight4Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight4;
+#endif //boneWeight4Flag
+
+#ifdef boneWeight5Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight5;
+#endif //boneWeight5Flag
+
+#ifdef boneWeight6Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight6;
+#endif //boneWeight6Flag
+
+#ifdef boneWeight7Flag
+#ifndef boneWeightsFlag
+#define boneWeightsFlag
+#endif
+attribute vec2 a_boneWeight7;
+#endif //boneWeight7Flag
+
+#if defined(numBones) && defined(boneWeightsFlag)
+#if (numBones > 0) 
+#define skinningFlag
+#endif
+#endif
+
+#if defined(numBones)
+#if numBones > 0
+uniform mat4 u_bones[numBones];
+#endif //numBones
+#endif
+
+#ifdef PackedDepthFlag
+varying float v_depth;
+#endif //PackedDepthFlag
+
+void main() {
+	#ifdef skinningFlag
+		mat4 skinning = mat4(0.0);
+		#ifdef boneWeight0Flag
+			skinning += (a_boneWeight0.y) * u_bones[int(a_boneWeight0.x)];
+		#endif //boneWeight0Flag
+		#ifdef boneWeight1Flag				
+			skinning += (a_boneWeight1.y) * u_bones[int(a_boneWeight1.x)];
+		#endif //boneWeight1Flag
+		#ifdef boneWeight2Flag		
+			skinning += (a_boneWeight2.y) * u_bones[int(a_boneWeight2.x)];
+		#endif //boneWeight2Flag
+		#ifdef boneWeight3Flag
+			skinning += (a_boneWeight3.y) * u_bones[int(a_boneWeight3.x)];
+		#endif //boneWeight3Flag
+		#ifdef boneWeight4Flag
+			skinning += (a_boneWeight4.y) * u_bones[int(a_boneWeight4.x)];
+		#endif //boneWeight4Flag
+		#ifdef boneWeight5Flag
+			skinning += (a_boneWeight5.y) * u_bones[int(a_boneWeight5.x)];
+		#endif //boneWeight5Flag
+		#ifdef boneWeight6Flag
+			skinning += (a_boneWeight6.y) * u_bones[int(a_boneWeight6.x)];
+		#endif //boneWeight6Flag
+		#ifdef boneWeight7Flag
+			skinning += (a_boneWeight7.y) * u_bones[int(a_boneWeight7.x)];
+		#endif //boneWeight7Flag
+	#endif //skinningFlag
+
+	#ifdef skinningFlag
+		vec4 pos = u_projViewWorldTrans * skinning * vec4(a_position, 1.0);
+	#else
+		vec4 pos = u_projViewWorldTrans * vec4(a_position, 1.0);
+	#endif
+
+	#ifdef PackedDepthFlag
+		v_depth = pos.z * 0.5 + 0.5;
+	#endif //PackedDepthFlag
+
+	gl_Position = pos;
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/JsonReader.rl b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/JsonReader.rl
new file mode 100644
index 0000000..89ccbb4
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/JsonReader.rl
@@ -0,0 +1,332 @@
+// Do not edit this file! Generated by Ragel.
+// Ragel.exe -G2 -J -o JsonReader.java JsonReader.rl
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.utils;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.JsonValue.ValueType;
+
+/** Lightweight JSON parser.<br>
+ * <br>
+ * The default behavior is to parse the JSON into a DOM containing {@link JsonValue} objects. Extend this class and override
+ * methods to perform event driven parsing. When this is done, the parse methods will return null.
+ * @author Nathan Sweet */
+public class JsonReader {
+	public JsonValue parse (String json) {
+		char[] data = json.toCharArray();
+		return parse(data, 0, data.length);
+	}
+
+	public JsonValue parse (Reader reader) {
+		try {
+			char[] data = new char[1024];
+			int offset = 0;
+			while (true) {
+				int length = reader.read(data, offset, data.length - offset);
+				if (length == -1) break;
+				if (length == 0) {
+					char[] newData = new char[data.length * 2];
+					System.arraycopy(data, 0, newData, 0, data.length);
+					data = newData;
+				} else
+					offset += length;
+			}
+			return parse(data, 0, offset);
+		} catch (IOException ex) {
+			throw new SerializationException(ex);
+		} finally {
+			try {
+				reader.close();
+			} catch (IOException ignored) {
+			}
+		}
+	}
+
+	public JsonValue parse (InputStream input) {
+		try {
+			return parse(new InputStreamReader(input, "ISO-8859-1"));
+		} catch (IOException ex) {
+			throw new SerializationException(ex);
+		}
+	}
+
+	public JsonValue parse (FileHandle file) {
+		try {
+			return parse(file.read());
+		} catch (Exception ex) {
+			throw new SerializationException("Error parsing file: " + file, ex);
+		}
+	}
+
+	public JsonValue parse (char[] data, int offset, int length) {
+		int cs, p = offset, pe = length, eof = pe, top = 0;
+		int[] stack = new int[4];
+
+		int s = 0;
+		Array<String> names = new Array(8);
+		boolean needsUnescape = false;
+		boolean discardBuffer = false; // When unquotedString and true/false/null both match, this discards unquotedString.
+		RuntimeException parseRuntimeEx = null;
+
+		boolean debug = false;
+		if (debug) System.out.println();
+
+		try {
+		%%{
+			machine json;
+
+			prepush {
+				if (top == stack.length) {
+					int[] newStack = new int[stack.length * 2];
+					System.arraycopy(stack, 0, newStack, 0, stack.length);
+					stack = newStack;
+				}
+			}
+
+			action buffer {
+				s = p;
+				needsUnescape = false;
+				discardBuffer = false;
+			}
+			action needsUnescape {
+				needsUnescape = true;
+			}
+			action name {
+				String name = new String(data, s, p - s);
+				s = p;
+				if (needsUnescape) name = unescape(name);
+				if (debug) System.out.println("name: " + name);
+				names.add(name);
+			}
+			action string {
+				if (!discardBuffer) {
+					String value = new String(data, s, p - s);
+					s = p;
+					if (needsUnescape) value = unescape(value);
+					String name = names.size > 0 ? names.pop() : null;
+					if (debug) System.out.println("string: " + name + "=" + value);
+					string(name, value);
+				}
+			}
+			action double {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("double: " + name + "=" + Double.parseDouble(value));
+				number(name, Double.parseDouble(value));
+			}
+			action long {
+				String value = new String(data, s, p - s);
+				s = p;
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("long: " + name + "=" + Long.parseLong(value));
+				number(name, Long.parseLong(value));
+			}
+			action trueValue {
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("boolean: " + name + "=true");
+				bool(name, true);
+				discardBuffer = true;
+			}
+			action falseValue {
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("boolean: " + name + "=false");
+				bool(name, false);
+				discardBuffer = true;
+			}
+			action null {
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("null: " + name);
+				string(name, null);
+				discardBuffer = true;
+			}
+			action startObject {
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("startObject: " + name);
+				startObject(name);
+				fcall object;
+			}
+			action endObject {
+				if (debug) System.out.println("endObject");
+				pop();
+				fret;
+			}
+			action startArray {
+				String name = names.size > 0 ? names.pop() : null;
+				if (debug) System.out.println("startArray: " + name);
+				startArray(name);
+				fcall array;
+			}
+			action endArray {
+				if (debug) System.out.println("endArray");
+				pop();
+				fret;
+			}
+
+			doubleChars = '-'? [0-9]+ '.' [0-9]+? ([eE] [+\-]? [0-9]+)?;
+			longChars = '-'? [0-9]+;
+			quotedChars = (^["\\] | ('\\' ["\\/bfnrtu] >needsUnescape))*;
+			unquotedNameChars = [a-zA-Z0-9_$] ^([:}\],] | space)*;
+			unquotedValueChars = [a-zA-Z_$] ^([:}\],] | space)*;
+			name = ('"' quotedChars >buffer %name '"') | unquotedNameChars >buffer %name | doubleChars >buffer %name;
+
+			startObject = '{' @startObject;
+			startArray = '[' @startArray;
+			string = '"' quotedChars >buffer %string '"';
+			unquotedString = unquotedValueChars >buffer %string;
+			number = longChars >buffer %long | doubleChars >buffer %double $-1;
+			nullValue = 'null' %null;
+			booleanValue = 'true' %trueValue | 'false' %falseValue;
+			value = startObject | startArray | number | string | nullValue | booleanValue | unquotedString $-1;
+
+			nameValue = name space* ':' space* value;
+
+			object := space* (nameValue space*)? (',' space* nameValue space*)** ','? space* '}' @endObject;
+
+			array := space* (value space*)? (',' space* value space*)** ','? space* ']' @endArray;
+
+			main := space* value space*;
+
+			write init;
+			write exec;
+		}%%
+		} catch (RuntimeException ex) {
+			parseRuntimeEx = ex;
+		}
+
+		if (p < pe) {
+			int lineNumber = 1;
+			for (int i = 0; i < p; i++)
+				if (data[i] == '\n') lineNumber++;
+			throw new SerializationException("Error parsing JSON on line " + lineNumber + " near: " + new String(data, p, pe - p),
+				parseRuntimeEx);
+		} else if (elements.size != 0) {
+			JsonValue element = elements.peek();
+			elements.clear();
+			if (element != null && element.isObject())
+				throw new SerializationException("Error parsing JSON, unmatched brace.");
+			else
+				throw new SerializationException("Error parsing JSON, unmatched bracket.");
+		} else if (parseRuntimeEx != null) {
+			throw new SerializationException("Error parsing JSON: " + new String(data), parseRuntimeEx);
+		}
+		JsonValue root = this.root;
+		this.root = null;
+		return root;
+	}
+
+	%% write data;
+
+	private final Array<JsonValue> elements = new Array(8);
+	private JsonValue root, current;
+
+	private void addChild (String name, JsonValue child) {
+		child.setName(name);
+		if (current == null) {
+			current = child;
+			root = child;
+		} else if (current.isArray() || current.isObject())
+			current.addChild(child);
+		else
+			root = current;
+	}
+
+	protected void startObject (String name) {
+		JsonValue value = new JsonValue(ValueType.object);
+		if (current != null) addChild(name, value);
+		elements.add(value);
+		current = value;
+	}
+
+	protected void startArray (String name) {
+		JsonValue value = new JsonValue(ValueType.array);
+		if (current != null) addChild(name, value);
+		elements.add(value);
+		current = value;
+	}
+
+	protected void pop () {
+		root = elements.pop();
+		current = elements.size > 0 ? elements.peek() : null;
+	}
+
+	protected void string (String name, String value) {
+		addChild(name, new JsonValue(value));
+	}
+
+	protected void number (String name, double value) {
+		addChild(name, new JsonValue(value));
+	}
+
+	protected void number (String name, long value) {
+		addChild(name, new JsonValue(value));
+	}
+
+	protected void bool (String name, boolean value) {
+		addChild(name, new JsonValue(value));
+	}
+
+	private String unescape (String value) {
+		int length = value.length();
+		StringBuilder buffer = new StringBuilder(length + 16);
+		for (int i = 0; i < length;) {
+			char c = value.charAt(i++);
+			if (c != '\\') {
+				buffer.append(c);
+				continue;
+			}
+			if (i == length) break;
+			c = value.charAt(i++);
+			if (c == 'u') {
+				buffer.append(Character.toChars(Integer.parseInt(value.substring(i, i + 4), 16)));
+				i += 4;
+				continue;
+			}
+			switch (c) {
+			case '"':
+			case '\\':
+			case '/':
+				break;
+			case 'b':
+				c = '\b';
+				break;
+			case 'f':
+				c = '\f';
+				break;
+			case 'n':
+				c = '\n';
+				break;
+			case 'r':
+				c = '\r';
+				break;
+			case 't':
+				c = '\t';
+				break;
+			default:
+				throw new SerializationException("Illegal escaped character: \\" + c);
+			}
+			buffer.append(c);
+		}
+		return buffer.toString();
+	}
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/XmlReader.rl b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/XmlReader.rl
new file mode 100644
index 0000000..79f07bb
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/XmlReader.rl
@@ -0,0 +1,525 @@
+// Do not edit this file! Generated by Ragel.
+// Ragel.exe -G2 -J -o XmlReader.java XmlReader.rl
+/*******************************************************************************
+ * Copyright 2011 See AUTHORS file.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+
+package com.badlogic.gdx.utils;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.utils.ObjectMap.Entry;
+
+/** Lightweight XML parser. Supports a subset of XML features: elements, attributes, text, predefined entities, CDATA, mixed
+ * content. Namespaces are parsed as part of the element or attribute name. Prologs and doctypes are ignored. Only 8-bit character
+ * encodings are supported. Input is assumed to be well formed.<br>
+ * <br>
+ * The default behavior is to parse the XML into a DOM. Extends this class and override methods to perform event driven parsing.
+ * When this is done, the parse methods will return null.
+ * @author Nathan Sweet */
+public class XmlReader {
+	private final Array<Element> elements = new Array(8);
+	private Element root, current;
+	private final StringBuilder textBuffer = new StringBuilder(64);
+
+	public Element parse (String xml) {
+		char[] data = xml.toCharArray();
+		return parse(data, 0, data.length);
+	}
+
+	public Element parse (Reader reader) throws IOException {
+		try {
+			char[] data = new char[1024];
+			int offset = 0;
+			while (true) {
+				int length = reader.read(data, offset, data.length - offset);
+				if (length == -1) break;
+				if (length == 0) {
+					char[] newData = new char[data.length * 2];
+					System.arraycopy(data, 0, newData, 0, data.length);
+					data = newData;
+				} else
+					offset += length;
+			}
+			return parse(data, 0, offset);
+		} catch (IOException ex) {
+			throw new SerializationException(ex);
+		} finally {
+			StreamUtils.closeQuietly(reader);
+		}
+	}
+
+	public Element parse (InputStream input) throws IOException {
+		try {
+			return parse(new InputStreamReader(input, "UTF-8"));
+		} catch (IOException ex) {
+			throw new SerializationException(ex);
+		} finally {
+			StreamUtils.closeQuietly(input);
+		}
+	}
+
+	public Element parse (FileHandle file) throws IOException {
+		InputStream is = null;
+		try {
+			return parse(file.reader("UTF-8"));
+		} catch (Exception ex) {
+			throw new SerializationException("Error parsing file: " + file, ex);
+		} finally {
+			StreamUtils.closeQuietly(is);
+		}
+	}
+
+	public Element parse (char[] data, int offset, int length) {
+		int cs, p = offset, pe = length;
+
+		int s = 0;
+		String attributeName = null;
+		boolean hasBody = false;
+
+		%%{
+		machine xml;
+
+		action buffer { s = p; }
+		action elementStart {
+			char c = data[s];
+			if (c == '?' || c == '!') {
+				if (
+					data[s + 1] == '[' && //
+					data[s + 2] == 'C' && //
+					data[s + 3] == 'D' && //
+					data[s + 4] == 'A' && //
+					data[s + 5] == 'T' && //
+					data[s + 6] == 'A' && //
+					data[s + 7] == '['
+				) {
+					s += 8;
+					p = s + 2;
+					while (data[p - 2] != ']' || data[p - 1] != ']' || data[p] != '>')
+						p++;
+					text(new String(data, s, p - s - 2));
+				} else if(c == '!' && data[s + 1] == '-' && data[s + 2] == '-') {
+					// from http://www.w3.org/TR/REC-xml/#syntax
+					// Comment ::= '<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
+					p = s + 3;
+					while (data[p] != '-' || data[p + 1] != '-' || data[p + 2] != '>') p++;
+					p += 2;
+				} else
+					while (data[p] != '>') p++;
+				fgoto elementBody;
+			}
+			hasBody = true;
+			open(new String(data, s, p - s));
+		}
+		action elementEndSingle {
+			hasBody = false;
+			close();
+			fgoto elementBody;
+		}
+		action elementEnd {
+			close();
+			fgoto elementBody;
+		}
+		action element {
+			if (hasBody) fgoto elementBody;
+		}
+		action attributeName {
+			attributeName = new String(data, s, p - s);
+		}
+		action attribute {
+			attribute(attributeName, new String(data, s, p - s));
+		}
+		action text {
+			int end = p;
+			while (end != s) {
+				switch (data[end - 1]) {
+				case ' ':
+				case '\t':
+				case '\n':
+				case '\r':
+					end--;
+					continue;
+				}
+				break;
+			}
+			int current = s;
+			boolean entityFound = false;
+			while (current != end) {
+				if (data[current++] != '&') continue;
+				int entityStart = current;
+				while (current != end) {
+					if (data[current++] != ';') continue;
+					textBuffer.append(data, s, entityStart - s - 1);
+					String name = new String(data, entityStart, current - entityStart - 1);
+					String value = entity(name);
+					textBuffer.append(value != null ? value : name);
+					s = current;
+					entityFound = true;
+					break;
+				}
+			}
+			if (entityFound) {
+				if (s < end) textBuffer.append(data, s, end - s);
+				text(textBuffer.toString());
+				textBuffer.setLength(0);
+			} else
+				text(new String(data, s, end - s));
+		}
+
+		attribute = ^(space | [/>=])+ >buffer %attributeName space* '=' space*
+			(('\'' ^'\''* >buffer %attribute '\'') | ('"' ^'"'* >buffer %attribute '"'));
+		element = '<' space* ^(space | [/>])+ >buffer %elementStart (space+ attribute)*
+			:>> (space* ('/' %elementEndSingle)? space* '>' @element);
+		elementBody := space* <: ((^'<'+ >buffer %text) <: space*)?
+			element? :>> ('<' space* '/' ^'>'+ '>' @elementEnd);
+		main := space* element space*;
+
+		write init;
+		write exec;
+		}%%
+
+		if (p < pe) {
+			int lineNumber = 1;
+			for (int i = 0; i < p; i++)
+				if (data[i] == '\n') lineNumber++;
+			throw new SerializationException("Error parsing XML on line " + lineNumber + " near: "
+				+ new String(data, p, Math.min(32, pe - p)));
+		} else if (elements.size != 0) {
+			Element element = elements.peek();
+			elements.clear();
+			throw new SerializationException("Error parsing XML, unclosed element: " + element.getName());
+		}
+		Element root = this.root;
+		this.root = null;
+		return root;
+	}
+
+	%% write data;
+
+	protected void open (String name) {
+		Element child = new Element(name, current);
+		Element parent = current;
+		if (parent != null) parent.addChild(child);
+		elements.add(child);
+		current = child;
+	}
+
+	protected void attribute (String name, String value) {
+		current.setAttribute(name, value);
+	}
+
+	protected String entity (String name) {
+		if (name.equals("lt")) return "<";
+		if (name.equals("gt")) return ">";
+		if (name.equals("amp")) return "&";
+		if (name.equals("apos")) return "'";
+		if (name.equals("quot")) return "\"";
+		if (name.startsWith("#x")) return Character.toString((char)Integer.parseInt(name.substring(2), 16));
+		return null;
+	}
+
+	protected void text (String text) {
+		String existing = current.getText();
+		current.setText(existing != null ? existing + text : text);
+	}
+
+	protected void close () {
+		root = elements.pop();
+		current = elements.size > 0 ? elements.peek() : null;
+	}
+
+	static public class Element {
+		private final String name;
+		private ObjectMap<String, String> attributes;
+		private Array<Element> children;
+		private String text;
+		private Element parent;
+
+		public Element (String name, Element parent) {
+			this.name = name;
+			this.parent = parent;
+		}
+
+		public String getName () {
+			return name;
+		}
+
+		public ObjectMap<String, String> getAttributes () {
+			return attributes;
+		}
+
+		/** @throws GdxRuntimeException if the attribute was not found. */
+		public String getAttribute (String name) {
+			if (attributes == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			String value = attributes.get(name);
+			if (value == null) throw new GdxRuntimeException("Element " + name + " doesn't have attribute: " + name);
+			return value;
+		}
+
+		public String getAttribute (String name, String defaultValue) {
+			if (attributes == null) return defaultValue;
+			String value = attributes.get(name);
+			if (value == null) return defaultValue;
+			return value;
+		}
+
+		public void setAttribute (String name, String value) {
+			if (attributes == null) attributes = new ObjectMap(8);
+			attributes.put(name, value);
+		}
+
+		public int getChildCount () {
+			if (children == null) return 0;
+			return children.size;
+		}
+
+		/** @throws GdxRuntimeException if the element has no children. */
+		public Element getChild (int i) {
+			if (children == null) throw new GdxRuntimeException("Element has no children: " + name);
+			return children.get(i);
+		}
+
+		public void addChild (Element element) {
+			if (children == null) children = new Array(8);
+			children.add(element);
+		}
+
+		public String getText () {
+			return text;
+		}
+
+		public void setText (String text) {
+			this.text = text;
+		}
+
+		public void removeChild (int index) {
+			if (children != null) children.removeIndex(index);
+		}
+
+		public void removeChild (Element child) {
+			if (children != null) children.removeValue(child, true);
+		}
+
+		public void remove () {
+			parent.removeChild(this);
+		}
+
+		public Element getParent () {
+			return parent;
+		}
+
+		public String toString () {
+			return toString("");
+		}
+
+		public String toString (String indent) {
+			StringBuilder buffer = new StringBuilder(128);
+			buffer.append(indent);
+			buffer.append('<');
+			buffer.append(name);
+			if (attributes != null) {
+				for (Entry<String, String> entry : attributes.entries()) {
+					buffer.append(' ');
+					buffer.append(entry.key);
+					buffer.append("=\"");
+					buffer.append(entry.value);
+					buffer.append('\"');
+				}
+			}
+			if (children == null && (text == null || text.length() == 0))
+				buffer.append("/>");
+			else {
+				buffer.append(">\n");
+				String childIndent = indent + '\t';
+				if (text != null && text.length() > 0) {
+					buffer.append(childIndent);
+					buffer.append(text);
+					buffer.append('\n');
+				}
+				if (children != null) {
+					for (Element child : children) {
+						buffer.append(child.toString(childIndent));
+						buffer.append('\n');
+					}
+				}
+				buffer.append(indent);
+				buffer.append("</");
+				buffer.append(name);
+				buffer.append('>');
+			}
+			return buffer.toString();
+		}
+
+		/** @param name the name of the child {@link Element}
+		 * @return the first child having the given name or null, does not recurse */
+		public Element getChildByName (String name) {
+			if (children == null) return null;
+			for (int i = 0; i < children.size; i++) {
+				Element element = children.get(i);
+				if (element.name.equals(name)) return element;
+			}
+			return null;
+		}
+
+		/** @param name the name of the child {@link Element}
+		 * @return the first child having the given name or null, recurses */
+		public Element getChildByNameRecursive (String name) {
+			if (children == null) return null;
+			for (int i = 0; i < children.size; i++) {
+				Element element = children.get(i);
+				if (element.name.equals(name)) return element;
+				Element found = element.getChildByNameRecursive(name);
+				if (found != null) return found;
+			}
+			return null;
+		}
+
+		/** @param name the name of the children
+		 * @return the children with the given name or an empty {@link Array} */
+		public Array<Element> getChildrenByName (String name) {
+			Array<Element> result = new Array<Element>();
+			if (children == null) return result;
+			for (int i = 0; i < children.size; i++) {
+				Element child = children.get(i);
+				if (child.name.equals(name)) result.add(child);
+			}
+			return result;
+		}
+
+		/** @param name the name of the children
+		 * @return the children with the given name or an empty {@link Array} */
+		public Array<Element> getChildrenByNameRecursively (String name) {
+			Array<Element> result = new Array<Element>();
+			getChildrenByNameRecursively(name, result);
+			return result;
+		}
+
+		private void getChildrenByNameRecursively (String name, Array<Element> result) {
+			if (children == null) return;
+			for (int i = 0; i < children.size; i++) {
+				Element child = children.get(i);
+				if (child.name.equals(name)) result.add(child);
+				child.getChildrenByNameRecursively(name, result);
+			}
+		}
+
+		/** @throws GdxRuntimeException if the attribute was not found. */
+		public float getFloatAttribute (String name) {
+			return Float.parseFloat(getAttribute(name));
+		}
+
+		public float getFloatAttribute (String name, float defaultValue) {
+			String value = getAttribute(name, null);
+			if (value == null) return defaultValue;
+			return Float.parseFloat(value);
+		}
+
+		/** @throws GdxRuntimeException if the attribute was not found. */
+		public int getIntAttribute (String name) {
+			return Integer.parseInt(getAttribute(name));
+		}
+
+		public int getIntAttribute (String name, int defaultValue) {
+			String value = getAttribute(name, null);
+			if (value == null) return defaultValue;
+			return Integer.parseInt(value);
+		}
+
+		/** @throws GdxRuntimeException if the attribute was not found. */
+		public boolean getBooleanAttribute (String name) {
+			return Boolean.parseBoolean(getAttribute(name));
+		}
+
+		public boolean getBooleanAttribute (String name, boolean defaultValue) {
+			String value = getAttribute(name, null);
+			if (value == null) return defaultValue;
+			return Boolean.parseBoolean(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public String get (String name) {
+			String value = get(name, null);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute or child: " + name);
+			return value;
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public String get (String name, String defaultValue) {
+			if (attributes != null) {
+				String value = attributes.get(name);
+				if (value != null) return value;
+			}
+			Element child = getChildByName(name);
+			if (child == null) return defaultValue;
+			String value = child.getText();
+			if (value == null) return defaultValue;
+			return value;
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public int getInt (String name) {
+			String value = get(name, null);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute or child: " + name);
+			return Integer.parseInt(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public int getInt (String name, int defaultValue) {
+			String value = get(name, null);
+			if (value == null) return defaultValue;
+			return Integer.parseInt(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public float getFloat (String name) {
+			String value = get(name, null);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute or child: " + name);
+			return Float.parseFloat(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public float getFloat (String name, float defaultValue) {
+			String value = get(name, null);
+			if (value == null) return defaultValue;
+			return Float.parseFloat(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public boolean getBoolean (String name) {
+			String value = get(name, null);
+			if (value == null) throw new GdxRuntimeException("Element " + this.name + " doesn't have attribute or child: " + name);
+			return Boolean.parseBoolean(value);
+		}
+
+		/** Returns the attribute value with the specified name, or if no attribute is found, the text of a child with the name.
+		 * @throws GdxRuntimeException if no attribute or child was not found. */
+		public boolean getBoolean (String name, boolean defaultValue) {
+			String value = get(name, null);
+			if (value == null) return defaultValue;
+			return Boolean.parseBoolean(value);
+		}
+	}
+}
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.fnt b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.fnt
new file mode 100644
index 0000000..d6bb16b
--- /dev/null
+++ b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.fnt
@@ -0,0 +1,229 @@
+info face="Arial" size=-15 bold=0 italic=0 charset="" unicode=1 stretchH=100 smooth=1 aa=2 padding=0,1,1,0 spacing=1,1 outline=0
+common lineHeight=18 base=14 scaleW=256 scaleH=512 pages=1 packed=0 alphaChnl=0 redChnl=4 greenChnl=4 blueChnl=4
+page id=0 file="arial-15.png"
+chars count=167
+char id=32   x=253   y=58    width=2     height=2     xoffset=0     yoffset=14    xadvance=4     page=0  chnl=15
+char id=33   x=203   y=55    width=3     height=12    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=34   x=225   y=67    width=5     height=5     xoffset=0     yoffset=3     xadvance=5     page=0  chnl=15
+char id=35   x=10    y=46    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=36   x=30    y=16    width=8     height=15    xoffset=0     yoffset=2     xadvance=8     page=0  chnl=15
+char id=37   x=212   y=16    width=13    height=12    xoffset=1     yoffset=3     xadvance=13    page=0  chnl=15
+char id=38   x=209   y=29    width=10    height=12    xoffset=0     yoffset=3     xadvance=10    page=0  chnl=15
+char id=39   x=235   y=67    width=3     height=5     xoffset=0     yoffset=3     xadvance=3     page=0  chnl=15
+char id=40   x=76    y=16    width=5     height=15    xoffset=1     yoffset=3     xadvance=5     page=0  chnl=15
+char id=41   x=82    y=16    width=5     height=15    xoffset=0     yoffset=3     xadvance=5     page=0  chnl=15
+char id=42   x=208   y=67    width=6     height=6     xoffset=0     yoffset=3     xadvance=6     page=0  chnl=15
+char id=43   x=62    y=71    width=9     height=9     xoffset=0     yoffset=5     xadvance=9     page=0  chnl=15
+char id=44   x=231   y=67    width=3     height=5     xoffset=1     yoffset=12    xadvance=4     page=0  chnl=15
+char id=45   x=250   y=67    width=5     height=3     xoffset=0     yoffset=9     xadvance=5     page=0  chnl=15
+char id=46   x=5     y=84    width=3     height=3     xoffset=1     yoffset=12    xadvance=4     page=0  chnl=15
+char id=47   x=166   y=56    width=6     height=12    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=48   x=20    y=46    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=49   x=179   y=56    width=5     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=50   x=72    y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=51   x=30    y=46    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=52   x=120   y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=53   x=40    y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=54   x=50    y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=55   x=27    y=59    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=56   x=60    y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=57   x=70    y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=58   x=186   y=69    width=3     height=9     xoffset=1     yoffset=6     xadvance=4     page=0  chnl=15
+char id=59   x=7     y=72    width=3     height=11    xoffset=1     yoffset=6     xadvance=4     page=0  chnl=15
+char id=60   x=72    y=71    width=8     height=9     xoffset=1     yoffset=5     xadvance=9     page=0  chnl=15
+char id=61   x=198   y=68    width=9     height=6     xoffset=0     yoffset=6     xadvance=9     page=0  chnl=15
+char id=62   x=81    y=71    width=8     height=9     xoffset=1     yoffset=5     xadvance=9     page=0  chnl=15
+char id=63   x=80    y=45    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=64   x=21    y=0     width=15    height=15    xoffset=1     yoffset=3     xadvance=15    page=0  chnl=15
+char id=65   x=13    y=33    width=12    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=66   x=220   y=29    width=10    height=12    xoffset=1     yoffset=3     xadvance=10    page=0  chnl=15
+char id=67   x=74    y=32    width=11    height=12    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=68   x=86    y=32    width=11    height=12    xoffset=1     yoffset=3     xadvance=11    page=0  chnl=15
+char id=69   x=90    y=45    width=9     height=12    xoffset=1     yoffset=3     xadvance=10    page=0  chnl=15
+char id=70   x=100   y=45    width=9     height=12    xoffset=1     yoffset=3     xadvance=9     page=0  chnl=15
+char id=71   x=98    y=32    width=11    height=12    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=72   x=176   y=30    width=10    height=12    xoffset=1     yoffset=3     xadvance=11    page=0  chnl=15
+char id=73   x=199   y=55    width=3     height=12    xoffset=1     yoffset=3     xadvance=3     page=0  chnl=15
+char id=74   x=144   y=57    width=7     height=12    xoffset=0     yoffset=3     xadvance=7     page=0  chnl=15
+char id=75   x=121   y=31    width=10    height=12    xoffset=1     yoffset=3     xadvance=10    page=0  chnl=15
+char id=76   x=18    y=59    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=77   x=226   y=16    width=12    height=12    xoffset=1     yoffset=3     xadvance=12    page=0  chnl=15
+char id=78   x=132   y=31    width=10    height=12    xoffset=1     yoffset=3     xadvance=11    page=0  chnl=15
+char id=79   x=239   y=16    width=12    height=12    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=80   x=143   y=30    width=10    height=12    xoffset=1     yoffset=3     xadvance=10    page=0  chnl=15
+char id=81   x=156   y=16    width=12    height=13    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=82   x=38    y=32    width=11    height=12    xoffset=1     yoffset=3     xadvance=11    page=0  chnl=15
+char id=83   x=154   y=30    width=10    height=12    xoffset=0     yoffset=3     xadvance=10    page=0  chnl=15
+char id=84   x=165   y=30    width=10    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=85   x=231   y=29    width=10    height=12    xoffset=1     yoffset=3     xadvance=11    page=0  chnl=15
+char id=86   x=0     y=33    width=12    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=87   x=178   y=16    width=16    height=12    xoffset=0     yoffset=3     xadvance=15    page=0  chnl=15
+char id=88   x=50    y=32    width=11    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=89   x=62    y=32    width=11    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=90   x=187   y=29    width=10    height=12    xoffset=0     yoffset=3     xadvance=9     page=0  chnl=15
+char id=91   x=104   y=16    width=4     height=15    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=92   x=152   y=56    width=6     height=12    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=93   x=109   y=16    width=4     height=15    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=94   x=190   y=69    width=7     height=7     xoffset=0     yoffset=3     xadvance=7     page=0  chnl=15
+char id=95   x=239   y=67    width=10    height=3     xoffset=0     yoffset=15    xadvance=8     page=0  chnl=15
+char id=96   x=0     y=84    width=4     height=3     xoffset=0     yoffset=3     xadvance=5     page=0  chnl=15
+char id=97   x=126   y=71    width=8     height=9     xoffset=0     yoffset=6     xadvance=8     page=0  chnl=15
+char id=98   x=117   y=58    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=99   x=135   y=70    width=8     height=9     xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=100  x=99    y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=101  x=144   y=70    width=8     height=9     xoffset=0     yoffset=6     xadvance=8     page=0  chnl=15
+char id=102  x=159   y=56    width=6     height=12    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=103  x=110   y=45    width=9     height=12    xoffset=0     yoffset=6     xadvance=8     page=0  chnl=15
+char id=104  x=81    y=58    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=105  x=195   y=55    width=3     height=12    xoffset=1     yoffset=3     xadvance=3     page=0  chnl=15
+char id=106  x=88    y=16    width=5     height=15    xoffset=-1    yoffset=3     xadvance=3     page=0  chnl=15
+char id=107  x=150   y=43    width=8     height=12    xoffset=1     yoffset=3     xadvance=7     page=0  chnl=15
+char id=108  x=252   y=16    width=3     height=12    xoffset=1     yoffset=3     xadvance=3     page=0  chnl=15
+char id=109  x=39    y=72    width=12    height=9     xoffset=1     yoffset=6     xadvance=12    page=0  chnl=15
+char id=110  x=153   y=69    width=8     height=9     xoffset=1     yoffset=6     xadvance=8     page=0  chnl=15
+char id=111  x=90    y=71    width=8     height=9     xoffset=0     yoffset=6     xadvance=8     page=0  chnl=15
+char id=112  x=213   y=42    width=8     height=12    xoffset=1     yoffset=6     xadvance=8     page=0  chnl=15
+char id=113  x=204   y=42    width=8     height=12    xoffset=0     yoffset=6     xadvance=8     page=0  chnl=15
+char id=114  x=180   y=69    width=5     height=9     xoffset=1     yoffset=6     xadvance=5     page=0  chnl=15
+char id=115  x=99    y=71    width=8     height=9     xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=116  x=173   y=56    width=5     height=12    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=117  x=108   y=71    width=8     height=9     xoffset=1     yoffset=6     xadvance=8     page=0  chnl=15
+char id=118  x=52    y=71    width=9     height=9     xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=119  x=11    y=72    width=13    height=9     xoffset=0     yoffset=6     xadvance=10    page=0  chnl=15
+char id=120  x=171   y=69    width=8     height=9     xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=121  x=130   y=44    width=9     height=12    xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=122  x=162   y=69    width=8     height=9     xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=123  x=48    y=16    width=6     height=15    xoffset=0     yoffset=3     xadvance=5     page=0  chnl=15
+char id=124  x=117   y=16    width=2     height=15    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=125  x=69    y=16    width=6     height=15    xoffset=0     yoffset=3     xadvance=5     page=0  chnl=15
+char id=126  x=215   y=67    width=9     height=5     xoffset=0     yoffset=7     xadvance=9     page=0  chnl=15
+char id=160  x=253   y=55    width=2     height=2     xoffset=0     yoffset=14    xadvance=4     page=0  chnl=15
+char id=161  x=252   y=29    width=3     height=12    xoffset=1     yoffset=6     xadvance=4     page=0  chnl=15
+char id=162  x=12    y=0     width=8     height=16    xoffset=0     yoffset=2     xadvance=8     page=0  chnl=15
+char id=163  x=140   y=44    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=164  x=117   y=71    width=8     height=9     xoffset=0     yoffset=5     xadvance=8     page=0  chnl=15
+char id=165  x=110   y=32    width=10    height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=166  x=114   y=16    width=2     height=15    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=181  x=45    y=58    width=8     height=12    xoffset=1     yoffset=6     xadvance=8     page=0  chnl=15
+char id=183  x=9     y=84    width=3     height=3     xoffset=1     yoffset=8     xadvance=5     page=0  chnl=15
+char id=191  x=63    y=58    width=8     height=12    xoffset=1     yoffset=6     xadvance=9     page=0  chnl=15
+char id=192  x=50    y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=193  x=154   y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=194  x=141   y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=195  x=63    y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=196  x=37    y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=197  x=120   y=16    width=12    height=14    xoffset=0     yoffset=1     xadvance=10    page=0  chnl=15
+char id=198  x=195   y=16    width=16    height=12    xoffset=0     yoffset=3     xadvance=15    page=0  chnl=15
+char id=199  x=0     y=0     width=11    height=16    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=200  x=20    y=17    width=9     height=15    xoffset=1     yoffset=0     xadvance=10    page=0  chnl=15
+char id=201  x=10    y=17    width=9     height=15    xoffset=1     yoffset=0     xadvance=10    page=0  chnl=15
+char id=202  x=0     y=17    width=9     height=15    xoffset=1     yoffset=0     xadvance=10    page=0  chnl=15
+char id=203  x=234   y=0     width=9     height=15    xoffset=1     yoffset=0     xadvance=10    page=0  chnl=15
+char id=204  x=94    y=16    width=4     height=15    xoffset=0     yoffset=0     xadvance=4     page=0  chnl=15
+char id=205  x=99    y=16    width=4     height=15    xoffset=0     yoffset=0     xadvance=4     page=0  chnl=15
+char id=206  x=62    y=16    width=6     height=15    xoffset=0     yoffset=0     xadvance=4     page=0  chnl=15
+char id=207  x=55    y=16    width=6     height=15    xoffset=0     yoffset=0     xadvance=4     page=0  chnl=15
+char id=208  x=26    y=33    width=11    height=12    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=209  x=201   y=0     width=10    height=15    xoffset=1     yoffset=0     xadvance=11    page=0  chnl=15
+char id=210  x=128   y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=11    page=0  chnl=15
+char id=211  x=115   y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=11    page=0  chnl=15
+char id=212  x=102   y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=11    page=0  chnl=15
+char id=213  x=89    y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=11    page=0  chnl=15
+char id=214  x=76    y=0     width=12    height=15    xoffset=0     yoffset=0     xadvance=11    page=0  chnl=15
+char id=216  x=143   y=16    width=12    height=13    xoffset=0     yoffset=3     xadvance=11    page=0  chnl=15
+char id=217  x=212   y=0     width=10    height=15    xoffset=1     yoffset=0     xadvance=11    page=0  chnl=15
+char id=218  x=223   y=0     width=10    height=15    xoffset=1     yoffset=0     xadvance=11    page=0  chnl=15
+char id=219  x=190   y=0     width=10    height=15    xoffset=1     yoffset=0     xadvance=11    page=0  chnl=15
+char id=220  x=179   y=0     width=10    height=15    xoffset=1     yoffset=0     xadvance=11    page=0  chnl=15
+char id=221  x=167   y=0     width=11    height=15    xoffset=0     yoffset=0     xadvance=10    page=0  chnl=15
+char id=222  x=198   y=29    width=10    height=12    xoffset=1     yoffset=3     xadvance=10    page=0  chnl=15
+char id=223  x=242   y=29    width=9     height=12    xoffset=1     yoffset=3     xadvance=9     page=0  chnl=15
+char id=224  x=177   y=43    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=225  x=9     y=59    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=226  x=135   y=57    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=227  x=126   y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=228  x=226   y=55    width=8     height=11    xoffset=0     yoffset=4     xadvance=8     page=0  chnl=15
+char id=229  x=108   y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=230  x=25    y=72    width=13    height=9     xoffset=0     yoffset=6     xadvance=13    page=0  chnl=15
+char id=231  x=169   y=16    width=8     height=13    xoffset=0     yoffset=6     xadvance=7     page=0  chnl=15
+char id=232  x=90    y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=233  x=54    y=58    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=234  x=240   y=42    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=235  x=217   y=55    width=8     height=11    xoffset=0     yoffset=4     xadvance=8     page=0  chnl=15
+char id=236  x=190   y=56    width=4     height=12    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=237  x=185   y=56    width=4     height=12    xoffset=1     yoffset=3     xadvance=4     page=0  chnl=15
+char id=238  x=249   y=42    width=6     height=12    xoffset=0     yoffset=3     xadvance=4     page=0  chnl=15
+char id=239  x=0     y=72    width=6     height=11    xoffset=0     yoffset=4     xadvance=4     page=0  chnl=15
+char id=240  x=0     y=46    width=9     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=241  x=0     y=59    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=242  x=231   y=42    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=243  x=222   y=42    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=244  x=36    y=59    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=245  x=195   y=42    width=8     height=12    xoffset=0     yoffset=3     xadvance=8     page=0  chnl=15
+char id=246  x=235   y=55    width=8     height=11    xoffset=0     yoffset=4     xadvance=8     page=0  chnl=15
+char id=248  x=207   y=55    width=9     height=11    xoffset=0     yoffset=5     xadvance=9     page=0  chnl=15
+char id=249  x=186   y=43    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=250  x=168   y=43    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=251  x=159   y=43    width=8     height=12    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=252  x=244   y=55    width=8     height=11    xoffset=1     yoffset=4     xadvance=8     page=0  chnl=15
+char id=253  x=244   y=0     width=9     height=15    xoffset=0     yoffset=3     xadvance=7     page=0  chnl=15
+char id=254  x=39    y=16    width=8     height=15    xoffset=1     yoffset=3     xadvance=8     page=0  chnl=15
+char id=255  x=133   y=16    width=9     height=14    xoffset=0     yoffset=4     xadvance=7     page=0  chnl=15
+kernings count=57
+kerning first=32  second=65  amount=-1  
+kerning first=121 second=46  amount=-1  
+kerning first=121 second=44  amount=-1  
+kerning first=119 second=46  amount=-1  
+kerning first=119 second=44  amount=-1  
+kerning first=118 second=46  amount=-1  
+kerning first=118 second=44  amount=-1  
+kerning first=114 second=46  amount=-1  
+kerning first=114 second=44  amount=-1  
+kerning first=89  second=118 amount=-1  
+kerning first=49  second=49  amount=-1  
+kerning first=65  second=32  amount=-1  
+kerning first=65  second=84  amount=-1  
+kerning first=65  second=86  amount=-1  
+kerning first=89  second=117 amount=-1  
+kerning first=65  second=89  amount=-1  
+kerning first=89  second=113 amount=-1  
+kerning first=89  second=112 amount=-1  
+kerning first=89  second=111 amount=-1  
+kerning first=89  second=101 amount=-1  
+kerning first=70  second=44  amount=-1  
+kerning first=70  second=46  amount=-1  
+kerning first=70  second=65  amount=-1  
+kerning first=89  second=97  amount=-1  
+kerning first=76  second=84  amount=-1  
+kerning first=76  second=86  amount=-1  
+kerning first=76  second=87  amount=-1  
+kerning first=76  second=89  amount=-1  
+kerning first=89  second=65  amount=-1  
+kerning first=89  second=58  amount=-1  
+kerning first=89  second=46  amount=-2  
+kerning first=80  second=44  amount=-2  
+kerning first=80  second=46  amount=-2  
+kerning first=80  second=65  amount=-1  
+kerning first=89  second=45  amount=-1  
+kerning first=89  second=44  amount=-2  
+kerning first=87  second=46  amount=-1  
+kerning first=87  second=44  amount=-1  
+kerning first=86  second=111 amount=-1  
+kerning first=84  second=44  amount=-1  
+kerning first=84  second=45  amount=-1  
+kerning first=84  second=46  amount=-1  
+kerning first=84  second=58  amount=-1  
+kerning first=86  second=101 amount=-1  
+kerning first=84  second=65  amount=-1  
+kerning first=86  second=97  amount=-1  
+kerning first=84  second=97  amount=-1  
+kerning first=84  second=99  amount=-1  
+kerning first=84  second=101 amount=-1  
+kerning first=86  second=65  amount=-1  
+kerning first=84  second=111 amount=-1  
+kerning first=86  second=46  amount=-1  
+kerning first=84  second=115 amount=-1  
+kerning first=86  second=45  amount=-1  
+kerning first=84  second=119 amount=-1  
+kerning first=84  second=121 amount=-1  
+kerning first=86  second=44  amount=-1  
diff --git a/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.png b/backends/gdx-backend-moe/src/com/badlogic/gdx/utils/arial-15.png
new file mode 100644
index 0000000000000000000000000000000000000000..ec8ddba0e8a474617db44af61c01f17357d8a79d
GIT binary patch
literal 21814
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

literal 0
HcmV?d00001

diff --git a/backends/gdx-backend-moe/src/ios/objectal/ALBuffer.java b/backends/gdx-backend-moe/src/ios/objectal/ALBuffer.java
new file mode 100644
index 0000000..acc140e
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/ALBuffer.java
@@ -0,0 +1,104 @@
+package ios.objectal;
+
+
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Owned;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.general.ptr.VoidPtr;
+import com.intel.inde.moe.natj.objc.ObjCRuntime;
+import com.intel.inde.moe.natj.objc.ann.ObjCClassBinding;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import ios.NSObject;
+import java.lang.String;
+
+@Generated
+@Runtime(ObjCRuntime.class)
+@ObjCClassBinding
+public class ALBuffer extends NSObject {
+	static {
+		NatJ.register();
+	}
+
+	@Generated
+	protected ALBuffer(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	@Owned
+	@Selector("alloc")
+	public static native ALBuffer alloc();
+
+	@Generated
+	@Selector("bits")
+	public native int bits();
+
+	@Generated
+	@Selector("bufferId")
+	public native int bufferId();
+
+	@Generated
+	@Selector("bufferWithName:data:size:format:frequency:")
+	public static native ALBuffer bufferWithNameDataSizeFormatFrequency(
+			String name, VoidPtr data, int size, int format, int frequency);
+
+	@Generated
+	@Selector("channels")
+	public native int channels();
+
+	@Generated
+	@Selector("duration")
+	public native float duration();
+
+	@Generated
+	@Selector("format")
+	public native int format();
+
+	@Generated
+	@Selector("freeDataOnDestroy")
+	public native boolean freeDataOnDestroy();
+
+	@Generated
+	@Selector("frequency")
+	public native int frequency();
+
+	@Generated
+	@Selector("init")
+	public native ALBuffer init();
+
+	@Generated
+	@Selector("initWithName:data:size:format:frequency:")
+	public native ALBuffer initWithNameDataSizeFormatFrequency(String name,
+			VoidPtr data, int size, int format, int frequency);
+
+	@Generated
+	@Selector("name")
+	public native String name();
+
+	@Generated
+	@Selector("parentBuffer")
+	public native ALBuffer parentBuffer();
+
+	@Generated
+	@Selector("setFreeDataOnDestroy:")
+	public native void setFreeDataOnDestroy(boolean value);
+
+	@Generated
+	@Selector("setName:")
+	public native void setName(String value);
+
+	@Generated
+	@Selector("setParentBuffer:")
+	public native void setParentBuffer(ALBuffer value);
+
+	@Generated
+	@Selector("size")
+	public native int size();
+
+	@Generated
+	@Selector("sliceWithName:offset:size:")
+	public native ALBuffer sliceWithNameOffsetSize(String sliceName,
+			int offset, int size);
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/ALSource.java b/backends/gdx-backend-moe/src/ios/objectal/ALSource.java
new file mode 100644
index 0000000..ca7a8eb
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/ALSource.java
@@ -0,0 +1,409 @@
+package ios.objectal;
+
+
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Mapped;
+import com.intel.inde.moe.natj.general.ann.MappedReturn;
+import com.intel.inde.moe.natj.general.ann.Owned;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.general.ptr.VoidPtr;
+import com.intel.inde.moe.natj.objc.ObjCRuntime;
+import com.intel.inde.moe.natj.objc.SEL;
+import com.intel.inde.moe.natj.objc.ann.ObjCBlock;
+import com.intel.inde.moe.natj.objc.ann.ObjCClassBinding;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.objc.map.ObjCObjectMapper;
+import ios.NSObject;
+import ios.foundation.NSArray;
+import ios.objectal.protocol.ALSoundSource;
+import ios.objectal.struct.ALPoint;
+import ios.objectal.struct.ALVector;
+
+@Generated
+@Runtime(ObjCRuntime.class)
+@ObjCClassBinding
+public class ALSource extends NSObject implements ALSoundSource {
+	static {
+		NatJ.register();
+	}
+
+	@Generated
+	protected ALSource(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	@Owned
+	@Selector("alloc")
+	public static native ALSource alloc();
+
+	@Generated
+	@Selector("buffer")
+	public native ALBuffer buffer();
+
+	@Generated
+	@Selector("buffersProcessed")
+	public native int buffersProcessed();
+
+	@Generated
+	@Selector("buffersQueued")
+	public native int buffersQueued();
+
+	@Generated
+	@Selector("clear")
+	public native void clear();
+
+	@Generated
+	@Selector("coneInnerAngle")
+	public native float coneInnerAngle();
+
+	@Generated
+	@Selector("coneOuterAngle")
+	public native float coneOuterAngle();
+
+	@Generated
+	@Selector("coneOuterGain")
+	public native float coneOuterGain();
+
+	@Generated
+	@Selector("direction")
+	@ByValue
+	public native ALVector direction();
+
+	@Generated
+	@Selector("fadeTo:duration:target:selector:")
+	public native void fadeToDurationTargetSelector(float gain, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("gain")
+	public native float gain();
+
+	@Generated
+	@Selector("init")
+	public native ALSource init();
+
+	@Generated
+	@Selector("interruptible")
+	public native boolean interruptible();
+
+	@Generated
+	@Selector("looping")
+	public native boolean looping();
+
+	@Generated
+	@Selector("maxDistance")
+	public native float maxDistance();
+
+	@Generated
+	@Selector("maxGain")
+	public native float maxGain();
+
+	@Generated
+	@Selector("minGain")
+	public native float minGain();
+
+	@Generated
+	@Selector("muted")
+	public native boolean muted();
+
+	@Generated
+	@Selector("offsetInBytes")
+	public native float offsetInBytes();
+
+	@Generated
+	@Selector("offsetInSamples")
+	public native float offsetInSamples();
+
+	@Generated
+	@Selector("offsetInSeconds")
+	public native float offsetInSeconds();
+
+	@Generated
+	@Selector("pan")
+	public native float pan();
+
+	@Generated
+	@Selector("panTo:duration:target:selector:")
+	public native void panToDurationTargetSelector(float pan, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("paused")
+	public native boolean paused();
+
+	@Generated
+	@Selector("pitch")
+	public native float pitch();
+
+	@Generated
+	@Selector("pitchTo:duration:target:selector:")
+	public native void pitchToDurationTargetSelector(float pitch,
+			float duration, @Mapped(ObjCObjectMapper.class) Object target,
+			SEL selector);
+
+	@Generated
+	@Selector("play")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object play();
+
+	@Generated
+	@Selector("play:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object play(ALBuffer buffer);
+
+	@Generated
+	@Selector("play:gain:pitch:pan:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object playGainPitchPanLoop(ALBuffer buffer, float gain,
+			float pitch, float pan, boolean loop);
+
+	@Generated
+	@Selector("play:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object playLoop(ALBuffer buffer, boolean loop);
+
+	@Generated
+	@Selector("playing")
+	public native boolean playing();
+
+	@Generated
+	@Selector("position")
+	@ByValue
+	public native ALPoint position();
+
+	@Generated
+	@Selector("queueBuffer:")
+	public native boolean queueBuffer(ALBuffer buffer);
+
+	@Generated
+	@Selector("queueBuffer:repeats:")
+	public native boolean queueBufferRepeats(ALBuffer buffer, int repeats);
+
+	@Generated
+	@Selector("queueBuffers:")
+	public native boolean queueBuffers(NSArray buffers);
+
+	@Generated
+	@Selector("queueBuffers:repeats:")
+	public native boolean queueBuffersRepeats(NSArray buffers, int repeats);
+
+	@Generated
+	@Selector("referenceDistance")
+	public native float referenceDistance();
+
+	@Generated
+	@Selector("registerNotification:callback:userData:")
+	public native void registerNotificationCallbackUserData(
+			int notificationID,
+			@ObjCBlock(name = "call_registerNotificationCallbackUserData") Block_registerNotificationCallbackUserData callback,
+			VoidPtr userData);
+
+	@Runtime(ObjCRuntime.class)
+	@Generated
+	static public interface Block_registerNotificationCallbackUserData {
+		@Generated
+		public void call_registerNotificationCallbackUserData(ALSource arg0,
+				int arg1, VoidPtr arg2);
+	}
+
+	@Generated
+	@Selector("reverbObstruction")
+	public native float reverbObstruction();
+
+	@Generated
+	@Selector("reverbOcclusion")
+	public native float reverbOcclusion();
+
+	@Generated
+	@Selector("reverbSendLevel")
+	public native float reverbSendLevel();
+
+	@Generated
+	@Selector("rewind")
+	public native void rewind();
+
+	@Generated
+	@Selector("rolloffFactor")
+	public native float rolloffFactor();
+
+	@Generated
+	@Selector("setBuffer:")
+	public native void setBuffer(ALBuffer value);
+
+	@Generated
+	@Selector("setConeInnerAngle:")
+	public native void setConeInnerAngle(float value);
+
+	@Generated
+	@Selector("setConeOuterAngle:")
+	public native void setConeOuterAngle(float value);
+
+	@Generated
+	@Selector("setConeOuterGain:")
+	public native void setConeOuterGain(float value);
+
+	@Generated
+	@Selector("setDirection:")
+	public native void setDirection(@ByValue ALVector value);
+
+	@Generated
+	@Selector("setGain:")
+	public native void setGain(float value);
+
+	@Generated
+	@Selector("setInterruptible:")
+	public native void setInterruptible(boolean value);
+
+	@Generated
+	@Selector("setLooping:")
+	public native void setLooping(boolean value);
+
+	@Generated
+	@Selector("setMaxDistance:")
+	public native void setMaxDistance(float value);
+
+	@Generated
+	@Selector("setMaxGain:")
+	public native void setMaxGain(float value);
+
+	@Generated
+	@Selector("setMinGain:")
+	public native void setMinGain(float value);
+
+	@Generated
+	@Selector("setMuted:")
+	public native void setMuted(boolean value);
+
+	@Generated
+	@Selector("setOffsetInBytes:")
+	public native void setOffsetInBytes(float value);
+
+	@Generated
+	@Selector("setOffsetInSamples:")
+	public native void setOffsetInSamples(float value);
+
+	@Generated
+	@Selector("setOffsetInSeconds:")
+	public native void setOffsetInSeconds(float value);
+
+	@Generated
+	@Selector("setPan:")
+	public native void setPan(float value);
+
+	@Generated
+	@Selector("setPaused:")
+	public native void setPaused(boolean value);
+
+	@Generated
+	@Selector("setPitch:")
+	public native void setPitch(float value);
+
+	@Generated
+	@Selector("setPosition:")
+	public native void setPosition(@ByValue ALPoint value);
+
+	@Generated
+	@Selector("setReferenceDistance:")
+	public native void setReferenceDistance(float value);
+
+	@Generated
+	@Selector("setReverbObstruction:")
+	public native void setReverbObstruction(float value);
+
+	@Generated
+	@Selector("setReverbOcclusion:")
+	public native void setReverbOcclusion(float value);
+
+	@Generated
+	@Selector("setReverbSendLevel:")
+	public native void setReverbSendLevel(float value);
+
+	@Generated
+	@Selector("setRolloffFactor:")
+	public native void setRolloffFactor(float value);
+
+	@Generated
+	@Selector("setSourceRelative:")
+	public native void setSourceRelative(int value);
+
+	@Generated
+	@Selector("setState:")
+	public native void setState(int value);
+
+	@Generated
+	@Selector("setVelocity:")
+	public native void setVelocity(@ByValue ALVector value);
+
+	@Generated
+	@Selector("setVolume:")
+	public native void setVolume(float value);
+
+	@Generated
+	@Selector("source")
+	public static native ALSource source();
+
+	@Generated
+	@Selector("sourceId")
+	public native int sourceId();
+
+	@Generated
+	@Selector("sourceRelative")
+	public native int sourceRelative();
+
+	@Generated
+	@Selector("sourceType")
+	public native int sourceType();
+
+	@Generated
+	@Selector("state")
+	public native int state();
+
+	@Generated
+	@Selector("stop")
+	public native void stop();
+
+	@Generated
+	@Selector("stopActions")
+	public native void stopActions();
+
+	@Generated
+	@Selector("stopFade")
+	public native void stopFade();
+
+	@Generated
+	@Selector("stopPan")
+	public native void stopPan();
+
+	@Generated
+	@Selector("stopPitch")
+	public native void stopPitch();
+
+	@Generated
+	@Selector("unqueueBuffer:")
+	public native boolean unqueueBuffer(ALBuffer buffer);
+
+	@Generated
+	@Selector("unqueueBuffers:")
+	public native boolean unqueueBuffers(NSArray buffers);
+
+	@Generated
+	@Selector("unregisterAllNotifications")
+	public native void unregisterAllNotifications();
+
+	@Generated
+	@Selector("unregisterNotification:")
+	public native void unregisterNotification(int notificationID);
+
+	@Generated
+	@Selector("velocity")
+	@ByValue
+	public native ALVector velocity();
+
+	@Generated
+	@Selector("volume")
+	public native float volume();
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/OALAudioTrack.java b/backends/gdx-backend-moe/src/ios/objectal/OALAudioTrack.java
new file mode 100644
index 0000000..0618ed5
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/OALAudioTrack.java
@@ -0,0 +1,342 @@
+package ios.objectal;
+
+
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Mapped;
+import com.intel.inde.moe.natj.general.ann.MappedReturn;
+import com.intel.inde.moe.natj.general.ann.Owned;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.objc.ObjCRuntime;
+import com.intel.inde.moe.natj.objc.SEL;
+import com.intel.inde.moe.natj.objc.ann.IsOptional;
+import com.intel.inde.moe.natj.objc.ann.ObjCClassBinding;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.objc.map.ObjCObjectMapper;
+import ios.NSObject;
+import ios.avfoundation.AVAudioPlayer;
+import ios.avfoundation.protocol.AVAudioPlayerDelegate;
+import ios.foundation.NSError;
+import ios.foundation.NSURL;
+import java.lang.String;
+
+@Generated
+@Runtime(ObjCRuntime.class)
+@ObjCClassBinding
+public class OALAudioTrack extends NSObject implements AVAudioPlayerDelegate {
+	static {
+		NatJ.register();
+	}
+
+	@Generated
+	protected OALAudioTrack(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	@Owned
+	@Selector("alloc")
+	public static native OALAudioTrack alloc();
+
+	@Generated
+	@IsOptional
+	@Deprecated
+	@Selector("audioPlayerBeginInterruption:")
+	public native void audioPlayerBeginInterruption(AVAudioPlayer player);
+
+	@Generated
+	@IsOptional
+	@Selector("audioPlayerDecodeErrorDidOccur:error:")
+	public native void audioPlayerDecodeErrorDidOccurError(
+			AVAudioPlayer player, NSError error);
+
+	@Generated
+	@IsOptional
+	@Selector("audioPlayerDidFinishPlaying:successfully:")
+	public native void audioPlayerDidFinishPlayingSuccessfully(
+			AVAudioPlayer player, boolean flag);
+
+	@Generated
+	@IsOptional
+	@Deprecated
+	@Selector("audioPlayerEndInterruption:")
+	public native void audioPlayerEndInterruption(AVAudioPlayer player);
+
+	@Generated
+	@IsOptional
+	@Deprecated
+	@Selector("audioPlayerEndInterruption:withFlags:")
+	public native void audioPlayerEndInterruptionWithFlags(
+			AVAudioPlayer player, int flags);
+
+	@Generated
+	@IsOptional
+	@Deprecated
+	@Selector("audioPlayerEndInterruption:withOptions:")
+	public native void audioPlayerEndInterruptionWithOptions(
+			AVAudioPlayer player, int flags);
+
+	@Generated
+	@Selector("autoPreload")
+	public native boolean autoPreload();
+
+	@Generated
+	@Selector("averagePowerForChannel:")
+	public native float averagePowerForChannel(int channelNumber);
+
+	@Generated
+	@Selector("clear")
+	public native void clear();
+
+	@Generated
+	@Selector("currentTime")
+	public native double currentTime();
+
+	@Generated
+	@Selector("currentlyLoadedUrl")
+	public native NSURL currentlyLoadedUrl();
+
+	@Generated
+	@Selector("delegate")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object delegate();
+
+	@Generated
+	@Selector("deviceCurrentTime")
+	public native double deviceCurrentTime();
+
+	@Generated
+	@Selector("duration")
+	public native double duration();
+
+	@Generated
+	@Selector("fadeTo:duration:target:selector:")
+	public native void fadeToDurationTargetSelector(float gain, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("gain")
+	public native float gain();
+
+	@Generated
+	@Selector("init")
+	public native OALAudioTrack init();
+
+	@Generated
+	@Selector("meteringEnabled")
+	public native boolean meteringEnabled();
+
+	@Generated
+	@Selector("muted")
+	public native boolean muted();
+
+	@Generated
+	@Selector("numberOfChannels")
+	public native int numberOfChannels();
+
+	@Generated
+	@Selector("numberOfLoops")
+	public native int numberOfLoops();
+
+	@Generated
+	@Selector("pan")
+	public native float pan();
+
+	@Generated
+	@Selector("panTo:duration:target:selector:")
+	public native void panToDurationTargetSelector(float pan, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("paused")
+	public native boolean paused();
+
+	@Generated
+	@Selector("peakPowerForChannel:")
+	public native float peakPowerForChannel(int channelNumber);
+
+	@Generated
+	@Selector("play")
+	public native boolean play();
+
+	@Generated
+	@Selector("playAfterTrack:")
+	public native boolean playAfterTrack(OALAudioTrack track);
+
+	@Generated
+	@Selector("playAfterTrack:timeAdjust:")
+	public native boolean playAfterTrackTimeAdjust(OALAudioTrack track,
+			double timeAdjust);
+
+	@Generated
+	@Selector("playAtTime:")
+	public native boolean playAtTime(double time);
+
+	@Generated
+	@Selector("playFile:")
+	public native boolean playFile(String path);
+
+	@Generated
+	@Selector("playFile:loops:")
+	public native boolean playFileLoops(String path, int loops);
+
+	@Generated
+	@Selector("playFileAsync:loops:target:selector:")
+	public native void playFileAsyncLoopsTargetSelector(String path, int loops,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("playFileAsync:target:selector:")
+	public native void playFileAsyncTargetSelector(String path,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("playUrl:")
+	public native boolean playUrl(NSURL url);
+
+	@Generated
+	@Selector("playUrl:loops:")
+	public native boolean playUrlLoops(NSURL url, int loops);
+
+	@Generated
+	@Selector("playUrlAsync:loops:target:selector:")
+	public native void playUrlAsyncLoopsTargetSelector(NSURL url, int loops,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("playUrlAsync:target:selector:")
+	public native void playUrlAsyncTargetSelector(NSURL url,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("player")
+	public native AVAudioPlayer player();
+
+	@Generated
+	@Selector("playing")
+	public native boolean playing();
+
+	@Generated
+	@Selector("preloadFile:")
+	public native boolean preloadFile(String path);
+
+	@Generated
+	@Selector("preloadFile:seekTime:")
+	public native boolean preloadFileSeekTime(String path, double seekTime);
+
+	@Generated
+	@Selector("preloadFileAsync:seekTime:target:selector:")
+	public native boolean preloadFileAsyncSeekTimeTargetSelector(String path,
+			double seekTime, @Mapped(ObjCObjectMapper.class) Object target,
+			SEL selector);
+
+	@Generated
+	@Selector("preloadFileAsync:target:selector:")
+	public native boolean preloadFileAsyncTargetSelector(String path,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("preloadUrl:")
+	public native boolean preloadUrl(NSURL url);
+
+	@Generated
+	@Selector("preloadUrl:seekTime:")
+	public native boolean preloadUrlSeekTime(NSURL url, double seekTime);
+
+	@Generated
+	@Selector("preloadUrlAsync:seekTime:target:selector:")
+	public native boolean preloadUrlAsyncSeekTimeTargetSelector(NSURL url,
+			double seekTime, @Mapped(ObjCObjectMapper.class) Object target,
+			SEL selector);
+
+	@Generated
+	@Selector("preloadUrlAsync:target:selector:")
+	public native boolean preloadUrlAsyncTargetSelector(NSURL url,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("preloaded")
+	public native boolean preloaded();
+
+	@Generated
+	@Selector("setAutoPreload:")
+	public native void setAutoPreload(boolean value);
+
+	@Generated
+	@Selector("setCurrentTime:")
+	public native void setCurrentTime(double value);
+
+	@Generated
+	@Selector("setDelegate:")
+	public native void setDelegate_unsafe(
+			@Mapped(ObjCObjectMapper.class) Object value);
+
+	@Generated
+	public void setDelegate(@Mapped(ObjCObjectMapper.class) Object value) {
+		com.intel.inde.moe.natj.objc.ObjCObject __old = (com.intel.inde.moe.natj.objc.ObjCObject) delegate();
+		if (value != null) {
+			com.intel.inde.moe.natj.objc.ObjCRuntime.associateObjCObject(this, value);
+		}
+		setDelegate_unsafe(value);
+		if (__old != null) {
+			com.intel.inde.moe.natj.objc.ObjCRuntime.dissociateObjCObject(this, __old);
+		}
+	}
+
+	@Generated
+	@Selector("setGain:")
+	public native void setGain(float value);
+
+	@Generated
+	@Selector("setMeteringEnabled:")
+	public native void setMeteringEnabled(boolean value);
+
+	@Generated
+	@Selector("setMuted:")
+	public native void setMuted(boolean value);
+
+	@Generated
+	@Selector("setNumberOfLoops:")
+	public native void setNumberOfLoops(int value);
+
+	@Generated
+	@Selector("setPan:")
+	public native void setPan(float value);
+
+	@Generated
+	@Selector("setPaused:")
+	public native void setPaused(boolean value);
+
+	@Generated
+	@Selector("setVolume:")
+	public native void setVolume(float value);
+
+	@Generated
+	@Selector("stop")
+	public native void stop();
+
+	@Generated
+	@Selector("stopActions")
+	public native void stopActions();
+
+	@Generated
+	@Selector("stopFade")
+	public native void stopFade();
+
+	@Generated
+	@Selector("stopPan")
+	public native void stopPan();
+
+	@Generated
+	@Selector("track")
+	public static native OALAudioTrack track();
+
+	@Generated
+	@Selector("updateMeters")
+	public native void updateMeters();
+
+	@Generated
+	@Selector("volume")
+	public native float volume();
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/OALSimpleAudio.java b/backends/gdx-backend-moe/src/ios/objectal/OALSimpleAudio.java
new file mode 100644
index 0000000..9daea67
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/OALSimpleAudio.java
@@ -0,0 +1,316 @@
+package ios.objectal;
+
+
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Mapped;
+import com.intel.inde.moe.natj.general.ann.MappedReturn;
+import com.intel.inde.moe.natj.general.ann.Owned;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.general.ptr.IntPtr;
+import com.intel.inde.moe.natj.objc.ObjCRuntime;
+import com.intel.inde.moe.natj.objc.ann.ObjCClassBinding;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.objc.map.ObjCObjectMapper;
+import ios.NSObject;
+import ios.foundation.NSURL;
+import java.lang.String;
+
+@Generated
+@Runtime(ObjCRuntime.class)
+@ObjCClassBinding
+public class OALSimpleAudio extends NSObject {
+	static {
+		NatJ.register();
+	}
+
+	@Generated
+	protected OALSimpleAudio(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	@Owned
+	@Selector("alloc")
+	public static native OALSimpleAudio alloc();
+
+	@Generated
+	@Selector("allowIpod")
+	public native boolean allowIpod();
+
+	@Generated
+	@Selector("backgroundTrack")
+	public native IntPtr backgroundTrack();
+
+	@Generated
+	@Selector("backgroundTrackURL")
+	public native NSURL backgroundTrackURL();
+
+	@Generated
+	@Selector("bgMuted")
+	public native boolean bgMuted();
+
+	@Generated
+	@Selector("bgPaused")
+	public native boolean bgPaused();
+
+	@Generated
+	@Selector("bgPlaying")
+	public native boolean bgPlaying();
+
+	@Generated
+	@Selector("bgVolume")
+	public native float bgVolume();
+
+	@Generated
+	@Selector("channel")
+	public native IntPtr channel();
+
+	@Generated
+	@Selector("context")
+	public native IntPtr context();
+
+	@Generated
+	@Selector("device")
+	public native IntPtr device();
+
+	@Generated
+	@Selector("effectsMuted")
+	public native boolean effectsMuted();
+
+	@Generated
+	@Selector("effectsPaused")
+	public native boolean effectsPaused();
+
+	@Generated
+	@Selector("effectsVolume")
+	public native float effectsVolume();
+
+	@Generated
+	@Selector("honorSilentSwitch")
+	public native boolean honorSilentSwitch();
+
+	@Generated
+	@Selector("init")
+	public native OALSimpleAudio init();
+
+	@Generated
+	@Selector("initWithReservedSources:monoSources:stereoSources:")
+	public native OALSimpleAudio initWithReservedSourcesMonoSourcesStereoSources(
+			int reservedSources, int monoSources, int stereoSources);
+
+	@Generated
+	@Selector("initWithSources:")
+	public native OALSimpleAudio initWithSources(int reservedSources);
+
+	@Generated
+	@Selector("interrupted")
+	public native boolean interrupted();
+
+	@Generated
+	@Selector("manuallySuspended")
+	public native boolean manuallySuspended();
+
+	@Generated
+	@Selector("muted")
+	public native boolean muted();
+
+	@Generated
+	@Selector("paused")
+	public native boolean paused();
+
+	@Generated
+	@Selector("playBg")
+	public native boolean playBg();
+
+	@Generated
+	@Selector("playBg:")
+	public native boolean playBg(String path);
+
+	@Generated
+	@Selector("playBg:loop:")
+	public native boolean playBgLoop(String path, boolean loop);
+
+	@Generated
+	@Selector("playBg:volume:pan:loop:")
+	public native boolean playBgVolumePanLoop(String filePath, float volume,
+			float pan, boolean loop);
+
+	@Generated
+	@Selector("playBgWithLoop:")
+	public native boolean playBgWithLoop(boolean loop);
+
+	@Generated
+	@Selector("playBuffer:volume:pitch:pan:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object playBufferVolumePitchPanLoop(
+			@Mapped(ObjCObjectMapper.class) Object buffer, float volume,
+			float pitch, float pan, boolean loop);
+
+	@Generated
+	@Selector("playEffect:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object playEffect(String filePath);
+
+	@Generated
+	@Selector("playEffect:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object playEffectLoop(String filePath, boolean loop);
+
+	@Generated
+	@Selector("playEffect:volume:pitch:pan:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native ALSource playEffectVolumePitchPanLoop(String filePath,
+			float volume, float pitch, float pan, boolean loop);
+
+	@Generated
+	@Selector("preloadBg:")
+	public native boolean preloadBg(String path);
+
+	@Generated
+	@Selector("preloadBg:seekTime:")
+	public native boolean preloadBgSeekTime(String path, double seekTime);
+
+	@Generated
+	@Selector("preloadCacheCount")
+	public native int preloadCacheCount();
+
+	@Generated
+	@Selector("preloadCacheEnabled")
+	public native boolean preloadCacheEnabled();
+
+	@Generated
+	@Selector("preloadEffect:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native ALBuffer preloadEffect(String filePath);
+
+	@Generated
+	@Selector("preloadEffect:reduceToMono:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public native Object preloadEffectReduceToMono(String filePath,
+			boolean reduceToMono);
+
+	@Generated
+	@Selector("reservedSources")
+	public native int reservedSources();
+
+	@Generated
+	@Selector("resetToDefault")
+	public native void resetToDefault();
+
+	@Generated
+	@Selector("setAllowIpod:")
+	public native void setAllowIpod(boolean value);
+
+	@Generated
+	@Selector("setBgMuted:")
+	public native void setBgMuted(boolean value);
+
+	@Generated
+	@Selector("setBgPaused:")
+	public native void setBgPaused(boolean value);
+
+	@Generated
+	@Selector("setBgVolume:")
+	public native void setBgVolume(float value);
+
+	@Generated
+	@Selector("setEffectsMuted:")
+	public native void setEffectsMuted(boolean value);
+
+	@Generated
+	@Selector("setEffectsPaused:")
+	public native void setEffectsPaused(boolean value);
+
+	@Generated
+	@Selector("setEffectsVolume:")
+	public native void setEffectsVolume(float value);
+
+	@Generated
+	@Selector("setHonorSilentSwitch:")
+	public native void setHonorSilentSwitch(boolean value);
+
+	@Generated
+	@Selector("setManuallySuspended:")
+	public native void setManuallySuspended(boolean value);
+
+	@Generated
+	@Selector("setMuted:")
+	public native void setMuted(boolean value);
+
+	@Generated
+	@Selector("setPaused:")
+	public native void setPaused(boolean value);
+
+	@Generated
+	@Selector("setPreloadCacheEnabled:")
+	public native void setPreloadCacheEnabled(boolean value);
+
+	@Generated
+	@Selector("setReservedSources:")
+	public native void setReservedSources(int value);
+
+	@Generated
+	@Selector("setUseHardwareIfAvailable:")
+	public native void setUseHardwareIfAvailable(boolean value);
+
+	@Generated
+	@Selector("sharedInstanceWithReservedSources:monoSources:stereoSources:")
+	public static native OALSimpleAudio sharedInstanceWithReservedSourcesMonoSourcesStereoSources(
+			int reservedSources, int monoSources, int stereoSources);
+
+	@Generated
+	@Selector("sharedInstanceWithSources:")
+	public static native OALSimpleAudio sharedInstanceWithSources(int sources);
+
+	@Generated
+	@Selector("stopAllEffects")
+	public native void stopAllEffects();
+
+	@Generated
+	@Selector("stopBg")
+	public native void stopBg();
+
+	@Generated
+	@Selector("stopEverything")
+	public native void stopEverything();
+
+	@Generated
+	@Selector("suspended")
+	public native boolean suspended();
+
+	@Generated
+	@Selector("unloadAllEffects")
+	public native void unloadAllEffects();
+
+	@Generated
+	@Selector("unloadEffect:")
+	public native boolean unloadEffect(String filePath);
+
+	@Generated
+	@Selector("useHardwareIfAvailable")
+	public native boolean useHardwareIfAvailable();
+	
+	/** Start OALSimpleAudio with the specified number of reserved sources.
+	 * Call this initializer if you want to use OALSimpleAudio, but keep some of the device's
+	 * audio sources (there are 32 in total) for your own use. <br>
+	 * <strong>Note:</strong> This method must be called ONLY ONCE, <em>BEFORE</em>
+	 * any attempt is made to access the shared instance.
+	 * To change the reserved sources after instantiation, modify reservedSources.
+	 *
+	 * @param sources the number of sources OALSimpleAudio will reserve for itself.
+	 * @return The shared instance.
+	 */
+	
+	private static int reservedSources = 16;
+	
+	static OALSimpleAudio instance = null;
+	
+	public static OALSimpleAudio sharedInstance() {
+		if (instance == null) {
+			instance = sharedInstanceWithSources(reservedSources);
+		}
+		return instance;
+	}
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/c/Globals.java b/backends/gdx-backend-moe/src/ios/objectal/c/Globals.java
new file mode 100644
index 0000000..ebb0265
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/c/Globals.java
@@ -0,0 +1,85 @@
+package ios.objectal.c;
+
+
+import com.intel.inde.moe.natj.c.CRuntime;
+import com.intel.inde.moe.natj.c.ann.CFunction;
+import com.intel.inde.moe.natj.c.ann.CVariable;
+import com.intel.inde.moe.natj.c.ann.Inline;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.MappedReturn;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.objc.map.ObjCStringMapper;
+import ios.objectal.OALSimpleAudio;
+import ios.objectal.struct.ALOrientation;
+import ios.objectal.struct.ALPoint;
+import ios.objectal.struct.ALVector;
+import java.lang.String;
+
+@Generated
+@Runtime(CRuntime.class)
+public final class Globals {
+	static {
+		NatJ.register();
+	}
+
+	@Generated
+	private Globals() {
+	}
+
+	@Generated
+	@CFunction
+	public static native int SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(
+			OALSimpleAudio arg1);
+
+	@Generated
+	@Inline
+	@CFunction
+	@ByValue
+	public static native ALPoint alpoint(float x, float y, float z);
+
+	@Generated
+	@Inline
+	@CFunction
+	@ByValue
+	public static native ALVector alvector(float x, float y, float z);
+
+	@Generated
+	@Inline
+	@CFunction
+	@ByValue
+	public static native ALOrientation alorientation(float atX, float atY,
+			float atZ, float upX, float upY, float upZ);
+
+	@Generated
+	@Inline
+	@CFunction
+	@ByValue
+	public static native ALPoint ALPointMake(float x, float y, float z);
+
+	@Generated
+	@CVariable()
+	@MappedReturn(ObjCStringMapper.class)
+	public static native String OALAudioTrackSourceChangedNotification();
+
+	@Generated
+	@CVariable()
+	@MappedReturn(ObjCStringMapper.class)
+	public static native String OALAudioTrackStartedPlayingNotification();
+
+	@Generated
+	@CVariable()
+	@MappedReturn(ObjCStringMapper.class)
+	public static native String OALAudioTrackStoppedPlayingNotification();
+
+	@Generated
+	@CVariable()
+	@MappedReturn(ObjCStringMapper.class)
+	public static native String OALAudioTrackFinishedPlayingNotification();
+
+	@Generated
+	@CVariable()
+	@MappedReturn(ObjCStringMapper.class)
+	public static native String OALAudioTrackLoopedNotification();
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/protocol/ALSoundSource.java b/backends/gdx-backend-moe/src/ios/objectal/protocol/ALSoundSource.java
new file mode 100644
index 0000000..8950656
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/protocol/ALSoundSource.java
@@ -0,0 +1,275 @@
+package ios.objectal.protocol;
+
+
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Mapped;
+import com.intel.inde.moe.natj.general.ann.MappedReturn;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.objc.ObjCRuntime;
+import com.intel.inde.moe.natj.objc.SEL;
+import com.intel.inde.moe.natj.objc.ann.ObjCProtocolName;
+import com.intel.inde.moe.natj.objc.ann.Selector;
+import com.intel.inde.moe.natj.objc.map.ObjCObjectMapper;
+import ios.objectal.ALBuffer;
+import ios.objectal.struct.ALPoint;
+import ios.objectal.struct.ALVector;
+
+@Generated
+@Runtime(ObjCRuntime.class)
+@ObjCProtocolName("ALSoundSource")
+public interface ALSoundSource {
+	@Generated
+	@Selector("clear")
+	public void clear();
+
+	@Generated
+	@Selector("coneInnerAngle")
+	public float coneInnerAngle();
+
+	@Generated
+	@Selector("coneOuterAngle")
+	public float coneOuterAngle();
+
+	@Generated
+	@Selector("coneOuterGain")
+	public float coneOuterGain();
+
+	@Generated
+	@Selector("direction")
+	@ByValue
+	public ALVector direction();
+
+	@Generated
+	@Selector("fadeTo:duration:target:selector:")
+	public void fadeToDurationTargetSelector(float gain, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("gain")
+	public float gain();
+
+	@Generated
+	@Selector("interruptible")
+	public boolean interruptible();
+
+	@Generated
+	@Selector("looping")
+	public boolean looping();
+
+	@Generated
+	@Selector("maxDistance")
+	public float maxDistance();
+
+	@Generated
+	@Selector("maxGain")
+	public float maxGain();
+
+	@Generated
+	@Selector("minGain")
+	public float minGain();
+
+	@Generated
+	@Selector("muted")
+	public boolean muted();
+
+	@Generated
+	@Selector("pan")
+	public float pan();
+
+	@Generated
+	@Selector("panTo:duration:target:selector:")
+	public void panToDurationTargetSelector(float pan, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("paused")
+	public boolean paused();
+
+	@Generated
+	@Selector("pitch")
+	public float pitch();
+
+	@Generated
+	@Selector("pitchTo:duration:target:selector:")
+	public void pitchToDurationTargetSelector(float pitch, float duration,
+			@Mapped(ObjCObjectMapper.class) Object target, SEL selector);
+
+	@Generated
+	@Selector("play:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public Object play(ALBuffer buffer);
+
+	@Generated
+	@Selector("play:gain:pitch:pan:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public Object playGainPitchPanLoop(ALBuffer buffer, float gain,
+			float pitch, float pan, boolean loop);
+
+	@Generated
+	@Selector("play:loop:")
+	@MappedReturn(ObjCObjectMapper.class)
+	public Object playLoop(ALBuffer buffer, boolean loop);
+
+	@Generated
+	@Selector("playing")
+	public boolean playing();
+
+	@Generated
+	@Selector("position")
+	@ByValue
+	public ALPoint position();
+
+	@Generated
+	@Selector("referenceDistance")
+	public float referenceDistance();
+
+	@Generated
+	@Selector("reverbObstruction")
+	public float reverbObstruction();
+
+	@Generated
+	@Selector("reverbOcclusion")
+	public float reverbOcclusion();
+
+	@Generated
+	@Selector("reverbSendLevel")
+	public float reverbSendLevel();
+
+	@Generated
+	@Selector("rewind")
+	public void rewind();
+
+	@Generated
+	@Selector("rolloffFactor")
+	public float rolloffFactor();
+
+	@Generated
+	@Selector("setConeInnerAngle:")
+	public void setConeInnerAngle(float value);
+
+	@Generated
+	@Selector("setConeOuterAngle:")
+	public void setConeOuterAngle(float value);
+
+	@Generated
+	@Selector("setConeOuterGain:")
+	public void setConeOuterGain(float value);
+
+	@Generated
+	@Selector("setDirection:")
+	public void setDirection(@ByValue ALVector value);
+
+	@Generated
+	@Selector("setGain:")
+	public void setGain(float value);
+
+	@Generated
+	@Selector("setInterruptible:")
+	public void setInterruptible(boolean value);
+
+	@Generated
+	@Selector("setLooping:")
+	public void setLooping(boolean value);
+
+	@Generated
+	@Selector("setMaxDistance:")
+	public void setMaxDistance(float value);
+
+	@Generated
+	@Selector("setMaxGain:")
+	public void setMaxGain(float value);
+
+	@Generated
+	@Selector("setMinGain:")
+	public void setMinGain(float value);
+
+	@Generated
+	@Selector("setMuted:")
+	public void setMuted(boolean value);
+
+	@Generated
+	@Selector("setPan:")
+	public void setPan(float value);
+
+	@Generated
+	@Selector("setPaused:")
+	public void setPaused(boolean value);
+
+	@Generated
+	@Selector("setPitch:")
+	public void setPitch(float value);
+
+	@Generated
+	@Selector("setPosition:")
+	public void setPosition(@ByValue ALPoint value);
+
+	@Generated
+	@Selector("setReferenceDistance:")
+	public void setReferenceDistance(float value);
+
+	@Generated
+	@Selector("setReverbObstruction:")
+	public void setReverbObstruction(float value);
+
+	@Generated
+	@Selector("setReverbOcclusion:")
+	public void setReverbOcclusion(float value);
+
+	@Generated
+	@Selector("setReverbSendLevel:")
+	public void setReverbSendLevel(float value);
+
+	@Generated
+	@Selector("setRolloffFactor:")
+	public void setRolloffFactor(float value);
+
+	@Generated
+	@Selector("setSourceRelative:")
+	public void setSourceRelative(int value);
+
+	@Generated
+	@Selector("setVelocity:")
+	public void setVelocity(@ByValue ALVector value);
+
+	@Generated
+	@Selector("setVolume:")
+	public void setVolume(float value);
+
+	@Generated
+	@Selector("sourceRelative")
+	public int sourceRelative();
+
+	@Generated
+	@Selector("sourceType")
+	public int sourceType();
+
+	@Generated
+	@Selector("stop")
+	public void stop();
+
+	@Generated
+	@Selector("stopActions")
+	public void stopActions();
+
+	@Generated
+	@Selector("stopFade")
+	public void stopFade();
+
+	@Generated
+	@Selector("stopPan")
+	public void stopPan();
+
+	@Generated
+	@Selector("stopPitch")
+	public void stopPitch();
+
+	@Generated
+	@Selector("velocity")
+	@ByValue
+	public ALVector velocity();
+
+	@Generated
+	@Selector("volume")
+	public float volume();
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/struct/ALOrientation.java b/backends/gdx-backend-moe/src/ios/objectal/struct/ALOrientation.java
new file mode 100644
index 0000000..7e74a2d
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/struct/ALOrientation.java
@@ -0,0 +1,54 @@
+package ios.objectal.struct;
+
+
+import com.intel.inde.moe.natj.c.StructObject;
+import com.intel.inde.moe.natj.c.ann.Structure;
+import com.intel.inde.moe.natj.c.ann.StructureField;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.ByValue;
+import com.intel.inde.moe.natj.general.ann.Generated;
+
+@Generated
+@Structure()
+public final class ALOrientation extends StructObject {
+	static {
+		NatJ.register();
+	}
+	private static long __natjCache;
+
+	@Generated
+	public ALOrientation() {
+		super(ALOrientation.class);
+	}
+
+	@Generated
+	protected ALOrientation(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	public ALOrientation(@ByValue ALVector at, @ByValue ALVector up) {
+		super(ALOrientation.class);
+		setAt(at);
+		setUp(up);
+	}
+
+	@Generated
+	@StructureField(order = 0, isGetter = true)
+	@ByValue
+	public native ALVector at();
+
+	@Generated
+	@StructureField(order = 0, isGetter = false)
+	public native void setAt(@ByValue ALVector value);
+
+	@Generated
+	@StructureField(order = 1, isGetter = true)
+	@ByValue
+	public native ALVector up();
+
+	@Generated
+	@StructureField(order = 1, isGetter = false)
+	public native void setUp(@ByValue ALVector value);
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/struct/ALPoint.java b/backends/gdx-backend-moe/src/ios/objectal/struct/ALPoint.java
new file mode 100644
index 0000000..6fcb833
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/struct/ALPoint.java
@@ -0,0 +1,60 @@
+package ios.objectal.struct;
+
+
+import com.intel.inde.moe.natj.c.StructObject;
+import com.intel.inde.moe.natj.c.ann.Structure;
+import com.intel.inde.moe.natj.c.ann.StructureField;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+
+@Generated
+@Structure()
+public final class ALPoint extends StructObject {
+	static {
+		NatJ.register();
+	}
+	private static long __natjCache;
+
+	@Generated
+	public ALPoint() {
+		super(ALPoint.class);
+	}
+
+	@Generated
+	protected ALPoint(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	public ALPoint(float x, float y, float z) {
+		super(ALPoint.class);
+		setX(x);
+		setY(y);
+		setZ(z);
+	}
+
+	@Generated
+	@StructureField(order = 0, isGetter = true)
+	public native float x();
+
+	@Generated
+	@StructureField(order = 0, isGetter = false)
+	public native void setX(float value);
+
+	@Generated
+	@StructureField(order = 1, isGetter = true)
+	public native float y();
+
+	@Generated
+	@StructureField(order = 1, isGetter = false)
+	public native void setY(float value);
+
+	@Generated
+	@StructureField(order = 2, isGetter = true)
+	public native float z();
+
+	@Generated
+	@StructureField(order = 2, isGetter = false)
+	public native void setZ(float value);
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/objectal/struct/ALVector.java b/backends/gdx-backend-moe/src/ios/objectal/struct/ALVector.java
new file mode 100644
index 0000000..eec97e9
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/objectal/struct/ALVector.java
@@ -0,0 +1,60 @@
+package ios.objectal.struct;
+
+
+import com.intel.inde.moe.natj.c.StructObject;
+import com.intel.inde.moe.natj.c.ann.Structure;
+import com.intel.inde.moe.natj.c.ann.StructureField;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.Pointer;
+import com.intel.inde.moe.natj.general.ann.Generated;
+
+@Generated
+@Structure()
+public final class ALVector extends StructObject {
+	static {
+		NatJ.register();
+	}
+	private static long __natjCache;
+
+	@Generated
+	public ALVector() {
+		super(ALVector.class);
+	}
+
+	@Generated
+	protected ALVector(Pointer peer) {
+		super(peer);
+	}
+
+	@Generated
+	public ALVector(float x, float y, float z) {
+		super(ALVector.class);
+		setX(x);
+		setY(y);
+		setZ(z);
+	}
+
+	@Generated
+	@StructureField(order = 0, isGetter = true)
+	public native float x();
+
+	@Generated
+	@StructureField(order = 0, isGetter = false)
+	public native void setX(float value);
+
+	@Generated
+	@StructureField(order = 1, isGetter = true)
+	public native float y();
+
+	@Generated
+	@StructureField(order = 1, isGetter = false)
+	public native void setY(float value);
+
+	@Generated
+	@StructureField(order = 2, isGetter = true)
+	public native float z();
+
+	@Generated
+	@StructureField(order = 2, isGetter = false)
+	public native void setZ(float value);
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/ios/openal/c/OpenAL.java b/backends/gdx-backend-moe/src/ios/openal/c/OpenAL.java
new file mode 100644
index 0000000..ed09322
--- /dev/null
+++ b/backends/gdx-backend-moe/src/ios/openal/c/OpenAL.java
@@ -0,0 +1,405 @@
+package ios.openal.c;
+
+
+import com.intel.inde.moe.natj.c.CRuntime;
+import com.intel.inde.moe.natj.c.ann.CFunction;
+import com.intel.inde.moe.natj.general.NatJ;
+import com.intel.inde.moe.natj.general.ann.Generated;
+import com.intel.inde.moe.natj.general.ann.Library;
+import com.intel.inde.moe.natj.general.ann.Runtime;
+import com.intel.inde.moe.natj.general.ann.UncertainArgument;
+import com.intel.inde.moe.natj.general.ann.UncertainReturn;
+import com.intel.inde.moe.natj.general.ptr.BytePtr;
+import com.intel.inde.moe.natj.general.ptr.ConstFloatPtr;
+import com.intel.inde.moe.natj.general.ptr.ConstIntPtr;
+import com.intel.inde.moe.natj.general.ptr.ConstVoidPtr;
+import com.intel.inde.moe.natj.general.ptr.DoublePtr;
+import com.intel.inde.moe.natj.general.ptr.FloatPtr;
+import com.intel.inde.moe.natj.general.ptr.IntPtr;
+import com.intel.inde.moe.natj.general.ptr.VoidPtr;
+import java.lang.String;
+
+@Generated
+@Library("OpenAL")
+@Runtime(CRuntime.class)
+public final class OpenAL {
+    @Generated
+    private OpenAL() {
+    }
+
+    @CFunction
+    @Generated
+    public static native void alEnable(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alDisable(int var0);
+
+    @CFunction
+    @Generated
+    public static native byte alIsEnabled(int var0);
+
+    @CFunction
+    @Generated
+    public static native String alGetString(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alGetBooleanv(int var0, BytePtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetIntegerv(int var0, IntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetFloatv(int var0, FloatPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetDoublev(int var0, DoublePtr var1);
+
+    @CFunction
+    @Generated
+    public static native byte alGetBoolean(int var0);
+
+    @CFunction
+    @Generated
+    public static native int alGetInteger(int var0);
+
+    @CFunction
+    @Generated
+    public static native float alGetFloat(int var0);
+
+    @CFunction
+    @Generated
+    public static native double alGetDouble(int var0);
+
+    @CFunction
+    @Generated
+    public static native int alGetError();
+
+    @CFunction
+    @Generated
+    public static native byte alIsExtensionPresent(String var0);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alGetProcAddress(String var0);
+
+    @CFunction
+    @Generated
+    public static native int alGetEnumValue(String var0);
+
+    @CFunction
+    @Generated
+    public static native void alListenerf(int var0, float var1);
+
+    @CFunction
+    @Generated
+    public static native void alListener3f(int var0, float var1, float var2, float var3);
+
+    @CFunction
+    @Generated
+    public static native void alListenerfv(int var0, ConstFloatPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alListeneri(int var0, int var1);
+
+    @CFunction
+    @Generated
+    public static native void alListener3i(int var0, int var1, int var2, int var3);
+
+    @CFunction
+    @Generated
+    public static native void alListeneriv(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetListenerf(int var0, FloatPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetListener3f(int var0, FloatPtr var1, FloatPtr var2, FloatPtr var3);
+
+    @CFunction
+    @Generated
+    public static native void alGetListenerfv(int var0, FloatPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetListeneri(int var0, IntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGetListener3i(int var0, IntPtr var1, IntPtr var2, IntPtr var3);
+
+    @CFunction
+    @Generated
+    public static native void alGetListeneriv(int var0, IntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alGenSources(int var0, IntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alDeleteSources(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native byte alIsSource(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alSourcef(int var0, int var1, float var2);
+
+    @CFunction
+    @Generated
+    public static native void alSource3f(int var0, int var1, float var2, float var3, float var4);
+
+    @CFunction
+    @Generated
+    public static native void alSourcefv(int var0, int var1, ConstFloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alSourcei(int var0, int var1, int var2);
+
+    @CFunction
+    @Generated
+    public static native void alSource3i(int var0, int var1, int var2, int var3, int var4);
+
+    @CFunction
+    @Generated
+    public static native void alSourceiv(int var0, int var1, ConstIntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetSourcef(int var0, int var1, FloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetSource3f(int var0, int var1, FloatPtr var2, FloatPtr var3, FloatPtr var4);
+
+    @CFunction
+    @Generated
+    public static native void alGetSourcefv(int var0, int var1, FloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetSourcei(int var0, int var1, IntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetSource3i(int var0, int var1, IntPtr var2, IntPtr var3, IntPtr var4);
+
+    @CFunction
+    @Generated
+    public static native void alGetSourceiv(int var0, int var1, IntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alSourcePlayv(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alSourceStopv(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alSourceRewindv(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alSourcePausev(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alSourcePlay(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alSourceStop(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alSourceRewind(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alSourcePause(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alSourceQueueBuffers(int var0, int var1, ConstIntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alSourceUnqueueBuffers(int var0, int var1, IntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGenBuffers(int var0, IntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native void alDeleteBuffers(int var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native byte alIsBuffer(int var0);
+
+    @CFunction
+    @Generated
+    public static native void alBufferData(int var0, int var1, ConstVoidPtr var2, int var3, int var4);
+
+    @CFunction
+    @Generated
+    public static native void alBufferf(int var0, int var1, float var2);
+
+    @CFunction
+    @Generated
+    public static native void alBuffer3f(int var0, int var1, float var2, float var3, float var4);
+
+    @CFunction
+    @Generated
+    public static native void alBufferfv(int var0, int var1, ConstFloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alBufferi(int var0, int var1, int var2);
+
+    @CFunction
+    @Generated
+    public static native void alBuffer3i(int var0, int var1, int var2, int var3, int var4);
+
+    @CFunction
+    @Generated
+    public static native void alBufferiv(int var0, int var1, ConstIntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetBufferf(int var0, int var1, FloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetBuffer3f(int var0, int var1, FloatPtr var2, FloatPtr var3, FloatPtr var4);
+
+    @CFunction
+    @Generated
+    public static native void alGetBufferfv(int var0, int var1, FloatPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetBufferi(int var0, int var1, IntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alGetBuffer3i(int var0, int var1, IntPtr var2, IntPtr var3, IntPtr var4);
+
+    @CFunction
+    @Generated
+    public static native void alGetBufferiv(int var0, int var1, IntPtr var2);
+
+    @CFunction
+    @Generated
+    public static native void alDopplerFactor(float var0);
+
+    @CFunction
+    @Generated
+    public static native void alDopplerVelocity(float var0);
+
+    @CFunction
+    @Generated
+    public static native void alSpeedOfSound(float var0);
+
+    @CFunction
+    @Generated
+    public static native void alDistanceModel(int var0);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcCreateContext(VoidPtr var0, ConstIntPtr var1);
+
+    @CFunction
+    @Generated
+    public static native byte alcMakeContextCurrent(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcProcessContext(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcSuspendContext(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcDestroyContext(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcGetCurrentContext();
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcGetContextsDevice(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcOpenDevice(String var0);
+
+    @CFunction
+    @Generated
+    public static native byte alcCloseDevice(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native int alcGetError(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native byte alcIsExtensionPresent(VoidPtr var0, String var1);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcGetProcAddress(VoidPtr var0, String var1);
+
+    @CFunction
+    @Generated
+    public static native int alcGetEnumValue(VoidPtr var0, String var1);
+
+    @CFunction
+    @Generated
+    public static native String alcGetString(VoidPtr var0, int var1);
+
+    @CFunction
+    @Generated
+    public static native void alcGetIntegerv(VoidPtr var0, int var1, int var2, IntPtr var3);
+
+    @CFunction
+    @Generated
+    public static native VoidPtr alcCaptureOpenDevice(String var0, int var1, int var2, int var3);
+
+    @CFunction
+    @Generated
+    public static native byte alcCaptureCloseDevice(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcCaptureStart(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcCaptureStop(VoidPtr var0);
+
+    @CFunction
+    @Generated
+    public static native void alcCaptureSamples(VoidPtr var0, VoidPtr var1, int var2);
+
+    static {
+        NatJ.register();
+    }
+}
\ No newline at end of file
diff --git a/backends/gdx-backend-moe/src/native/inline/Globals.m b/backends/gdx-backend-moe/src/native/inline/Globals.m
new file mode 100644
index 0000000..d98381d
--- /dev/null
+++ b/backends/gdx-backend-moe/src/native/inline/Globals.m
@@ -0,0 +1,26 @@
+//
+//  Globals.m
+//
+
+#import <ObjectAL/ObjectAL/OpenAL/ALTypes.h>
+
+
+#define EXPORT __attribute__ ((visibility ("default")))
+
+EXPORT ALPoint __natj_inline_alpoint(const float x, const float y, const float z) {
+	return alpoint(x, y, z);
+}
+
+EXPORT ALVector __natj_inline_alvector(const float x, const float y, const float z) {
+	return alvector(x, y, z);
+}
+
+EXPORT ALOrientation __natj_inline_alorientation(const float atX, const float atY, const float atZ, const float upX, const float upY, const float upZ) {
+	return alorientation(atX, atY, atZ, upX, upY, upZ);
+}
+
+EXPORT ALPoint __natj_inline_ALPointMake(float x, float y, float z) {
+	return ALPointMake(x, y, z);
+}
+
+
diff --git a/pom.xml b/pom.xml
index b69bb9c..5f44bd6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -51,6 +51,7 @@
   </properties>
 
   <modules>
+    <module>backends/gdx-backend-moe</module>
     <module>extensions/gdx-jnigen</module>
     <module>gdx</module>
     <module>gdx/jni/maven</module>

-- 
2.3.8 (Apple Git-58)

